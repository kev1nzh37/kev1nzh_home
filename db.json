{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/img/wechat.jpeg","path":"img/wechat.jpeg","modified":1,"renderable":0},{"_id":"source/img/article/Start.jpeg","path":"img/article/Start.jpeg","modified":1,"renderable":0},{"_id":"source/img/article/vite.png","path":"img/article/vite.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/vite-2.md","hash":"b5d6e73917741f1eb64231bc3f02adfcec67300f","modified":1626234994940},{"_id":"source/_posts/vite-3.md","hash":"ee9a11e362bcb91fc65185e05501cc86b40326c6","modified":1626235037794},{"_id":"source/.DS_Store","hash":"1d4954a6780d1c4cf8851f7b06f0c9c20296b7af","modified":1626234090087},{"_id":"source/_posts/Start.md","hash":"e190ced6da3d46dbcb7342a0353917450c4d34be","modified":1626234495398},{"_id":"source/img/.DS_Store","hash":"5f32781abe83a06a92bc77e29a227f5ae933259d","modified":1626234483075},{"_id":"source/_posts/vite-1.md","hash":"d56375d8dab9d9803d939b70bec1d7056f5aa56d","modified":1626234975242},{"_id":"source/about/index.md","hash":"b00e00e07ec98678ac2ed2f904bd43ea002ad1e2","modified":1626233918853},{"_id":"source/img/wechat.jpeg","hash":"231a6eed475fa3cb226d74a721099ddc78d5a9a9","modified":1626233616026},{"_id":"source/img/article/Start.jpeg","hash":"4357f374d076c6902fcf6987d06b80d76dad67a6","modified":1626234313170},{"_id":"source/img/avatar.jpeg","hash":"dde33732e35fca65c4fdc4433451c226dbd08d85","modified":1626148830701},{"_id":"source/img/article/vite.png","hash":"cd9e24085f742a821628469560db270a16940160","modified":1626234659806},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"public/local-search.xml","hash":"9d69587eef413e7bf2397aec904d20149afb2e88","modified":1626235517116},{"_id":"public/about/index.html","hash":"10f6a79d1709fad9056b02a0f882afa0f22868a1","modified":1626235517116},{"_id":"public/2021/07/14/vite-1/index.html","hash":"823d32658435025c19d47e14892feb59c91c7983","modified":1626235517116},{"_id":"public/2021/07/14/vite-2/index.html","hash":"90307824bb3f7bcf960814b955bebc8ccce69f38","modified":1626235517116},{"_id":"public/2021/07/14/vite-3/index.html","hash":"291f75789af2af48a31d2ab909214937b64cd814","modified":1626235517116},{"_id":"public/2021/07/13/Start/index.html","hash":"84fdf250daf73d01bf41728bb818b22026655041","modified":1626235517116},{"_id":"public/archives/index.html","hash":"edfa5ec3ff23e19d1c448c18197b50337ba12512","modified":1626235517116},{"_id":"public/archives/2021/index.html","hash":"edfa5ec3ff23e19d1c448c18197b50337ba12512","modified":1626235517116},{"_id":"public/archives/2021/07/index.html","hash":"edfa5ec3ff23e19d1c448c18197b50337ba12512","modified":1626235517116},{"_id":"public/tags/生活/index.html","hash":"6ec5f132dbbeed2364761de0bd682a3df07ebed7","modified":1626235517116},{"_id":"public/tags/工程化/index.html","hash":"c8d108cef1a56d280819584ae5b545039e05bf13","modified":1626235517116},{"_id":"public/tags/Vite/index.html","hash":"71eff03d4632563aa757573d108dbcaade825234","modified":1626235517116},{"_id":"public/index.html","hash":"4c28cd176d99af94b6a172f08581a2d678f07dbe","modified":1626235517116},{"_id":"public/404.html","hash":"71f841da44151a19c7169780b1458c83f1436a0d","modified":1626235517116},{"_id":"public/tags/index.html","hash":"64c667db2242d4e6c7913d3750a4ee96fad5b688","modified":1626235517116},{"_id":"public/categories/index.html","hash":"12c9c1d24312581ff7fb988d5fd9f4ac6afe359a","modified":1626235517116},{"_id":"public/links/index.html","hash":"60cde3e627d6b6630a0759e99e36fe043aae05ed","modified":1626235517116},{"_id":"public/img/article/Start.jpeg","hash":"4357f374d076c6902fcf6987d06b80d76dad67a6","modified":1626235517116},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1626235517116},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1626235517116},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1626235517116},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1626235517116},{"_id":"public/img/wechat.jpeg","hash":"231a6eed475fa3cb226d74a721099ddc78d5a9a9","modified":1626235517116},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1626235517116},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1626235517116},{"_id":"public/img/avatar.jpeg","hash":"dde33732e35fca65c4fdc4433451c226dbd08d85","modified":1626235517116},{"_id":"public/img/article/vite.png","hash":"cd9e24085f742a821628469560db270a16940160","modified":1626235517116},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1626235517116},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1626235517116},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1626235517116},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1626235517116},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1626235517116},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1626235517116},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1626235517116},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1626235517116},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1626235517116},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1626235517116},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1626235517116}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2021-07-14T02:57:55.000Z","layout":"about","_content":"\n#### 前端开发\n\n几年经验的前端开发，需要会的都会，没啥好说的。\n\n#### 养猫世家\n\n手下众多。\n\n\n#### FIFA\n\n车枪球 / ns / ps5 / steam 涉猎广泛。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-07-14 10:57:55\nlayout: about\n---\n\n#### 前端开发\n\n几年经验的前端开发，需要会的都会，没啥好说的。\n\n#### 养猫世家\n\n手下众多。\n\n\n#### FIFA\n\n车枪球 / ns / ps5 / steam 涉猎广泛。","updated":"2021-07-14T03:38:38.853Z","path":"about/index.html","comments":1,"_id":"ckr2ymzzv00002z6bg8ui4obo","content":"<h4 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h4><p>几年经验的前端开发，需要会的都会，没啥好说的。</p>\n<h4 id=\"养猫世家\"><a href=\"#养猫世家\" class=\"headerlink\" title=\"养猫世家\"></a>养猫世家</h4><p>手下众多。</p>\n<h4 id=\"FIFA\"><a href=\"#FIFA\" class=\"headerlink\" title=\"FIFA\"></a>FIFA</h4><p>车枪球 / ns / ps5 / steam 涉猎广泛。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h4><p>几年经验的前端开发，需要会的都会，没啥好说的。</p>\n<h4 id=\"养猫世家\"><a href=\"#养猫世家\" class=\"headerlink\" title=\"养猫世家\"></a>养猫世家</h4><p>手下众多。</p>\n<h4 id=\"FIFA\"><a href=\"#FIFA\" class=\"headerlink\" title=\"FIFA\"></a>FIFA</h4><p>车枪球 / ns / ps5 / steam 涉猎广泛。</p>\n"}],"Post":[{"title":"Start","date":"2021-07-13T03:52:08.000Z","index_img":"/img/article/Start.jpeg","_content":"\n\n“你在打牌的时候，即便你抓到一副最烂的牌，你也不能弃局你也得把这个牌打完。我们很多时候是不是觉得我们抓的牌实在是太差了呀，但是再差的牌你也应该打下去。\n\n有的时候我们惊奇地发现，再烂的牌我们打到最后还赢了，有没有这种可能。有的时候抓到一手好牌，你觉得你会赢反而输了。我们登上并非我们所选择的舞台，演出并非我们所选择的剧本。在座的有哪个同学是自愿来到这个世界上的，其实没有。我们登上并非我们选择的舞台。在座的有谁的剧本是你自己设定的。其实不是的。仔细想一想，我们这一生中其实自己能够决定的东西很少，我们可能能决定百分之五的东西，但是百分之九十五的东西是我们决定不了的。我们决定不了我们的出身，决定不了我们的智商，我们更决定不了我们这一生的贵人相助。\n\n很多时候我们会羡慕别人的剧本，我有时候也会羡慕别人的剧本。但是没有谁的剧本值得羡慕，你只能把自己的剧本演好。如果在你的一生中，真的遭遇到这些挫折，那么对不起，这就是你的剧本。你有两种选择，一种是选择弃演，一种是把既定的剧本给选好、给演好。希望大家演好自己的剧本。”\n","source":"_posts/Start.md","raw":"---\ntitle: Start\ndate: 2021-07-13 11:52:08\ntags: 生活\nindex_img: /img/article/Start.jpeg\n---\n\n\n“你在打牌的时候，即便你抓到一副最烂的牌，你也不能弃局你也得把这个牌打完。我们很多时候是不是觉得我们抓的牌实在是太差了呀，但是再差的牌你也应该打下去。\n\n有的时候我们惊奇地发现，再烂的牌我们打到最后还赢了，有没有这种可能。有的时候抓到一手好牌，你觉得你会赢反而输了。我们登上并非我们所选择的舞台，演出并非我们所选择的剧本。在座的有哪个同学是自愿来到这个世界上的，其实没有。我们登上并非我们选择的舞台。在座的有谁的剧本是你自己设定的。其实不是的。仔细想一想，我们这一生中其实自己能够决定的东西很少，我们可能能决定百分之五的东西，但是百分之九十五的东西是我们决定不了的。我们决定不了我们的出身，决定不了我们的智商，我们更决定不了我们这一生的贵人相助。\n\n很多时候我们会羡慕别人的剧本，我有时候也会羡慕别人的剧本。但是没有谁的剧本值得羡慕，你只能把自己的剧本演好。如果在你的一生中，真的遭遇到这些挫折，那么对不起，这就是你的剧本。你有两种选择，一种是选择弃演，一种是把既定的剧本给选好、给演好。希望大家演好自己的剧本。”\n","slug":"Start","published":1,"updated":"2021-07-14T03:48:15.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2ymzzy00012z6b78pk4ebj","content":"<p>“你在打牌的时候，即便你抓到一副最烂的牌，你也不能弃局你也得把这个牌打完。我们很多时候是不是觉得我们抓的牌实在是太差了呀，但是再差的牌你也应该打下去。</p>\n<p>有的时候我们惊奇地发现，再烂的牌我们打到最后还赢了，有没有这种可能。有的时候抓到一手好牌，你觉得你会赢反而输了。我们登上并非我们所选择的舞台，演出并非我们所选择的剧本。在座的有哪个同学是自愿来到这个世界上的，其实没有。我们登上并非我们选择的舞台。在座的有谁的剧本是你自己设定的。其实不是的。仔细想一想，我们这一生中其实自己能够决定的东西很少，我们可能能决定百分之五的东西，但是百分之九十五的东西是我们决定不了的。我们决定不了我们的出身，决定不了我们的智商，我们更决定不了我们这一生的贵人相助。</p>\n<p>很多时候我们会羡慕别人的剧本，我有时候也会羡慕别人的剧本。但是没有谁的剧本值得羡慕，你只能把自己的剧本演好。如果在你的一生中，真的遭遇到这些挫折，那么对不起，这就是你的剧本。你有两种选择，一种是选择弃演，一种是把既定的剧本给选好、给演好。希望大家演好自己的剧本。”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“你在打牌的时候，即便你抓到一副最烂的牌，你也不能弃局你也得把这个牌打完。我们很多时候是不是觉得我们抓的牌实在是太差了呀，但是再差的牌你也应该打下去。</p>\n<p>有的时候我们惊奇地发现，再烂的牌我们打到最后还赢了，有没有这种可能。有的时候抓到一手好牌，你觉得你会赢反而输了。我们登上并非我们所选择的舞台，演出并非我们所选择的剧本。在座的有哪个同学是自愿来到这个世界上的，其实没有。我们登上并非我们选择的舞台。在座的有谁的剧本是你自己设定的。其实不是的。仔细想一想，我们这一生中其实自己能够决定的东西很少，我们可能能决定百分之五的东西，但是百分之九十五的东西是我们决定不了的。我们决定不了我们的出身，决定不了我们的智商，我们更决定不了我们这一生的贵人相助。</p>\n<p>很多时候我们会羡慕别人的剧本，我有时候也会羡慕别人的剧本。但是没有谁的剧本值得羡慕，你只能把自己的剧本演好。如果在你的一生中，真的遭遇到这些挫折，那么对不起，这就是你的剧本。你有两种选择，一种是选择弃演，一种是把既定的剧本给选好、给演好。希望大家演好自己的剧本。”</p>\n"},{"title":"Vite 依赖解析和预构建 源码分析 - (1)代码入口","date":"2021-07-14T03:49:57.000Z","index_img":"/img/article/vite.png","_content":"\n# Vite 依赖解析和预构建 源码分析 - (1)代码入口\n\n#### Server.listen\n\n在 cli.ts 文件中，接收命令行的运行参数。\n\n```typescript\n// 命令行输入命令启动vite\nnpm run dev\n// 根据package调用vite并获取命令参数 如--force build...\nvite xxxx xxx xxx\n```\n\nvite 运行的第一步，获取命令参数，最后创建 server 并运行 listen 函数。\n\n```typescript\n//cli.ts\n\n.action(async (root: string, options: ServerOptions & GlobalCLIOptions) => {\n        const { createServer } = await import('./server')\n        try {\n                const server = await createServer({\n                ...\n                })\n                await server.listen()\n        } catch (e) {\n                ...\n        }\n})\n```\n\nlisten 函数中，runOptimize 函数就是预构建的核心代码。\n\n```typescript\n// server/index.ts => listen\nif (!middlewareMode && httpServer) {\n  // overwrite listen to run optimizer before server start\n  const listen = httpServer.listen.bind(httpServer);\n  httpServer.listen = (async (port: number, ...args: any[]) => {\n    try {\n      await container.buildStart({});\n      await runOptimize();\n    } catch (e) {\n      httpServer.emit('error', e);\n      return;\n    }\n    return listen(port, ...args);\n  }) as any;\n  ...\n} else {\n  await container.buildStart({});\n  await runOptimize();\n}\n\n// server/index.ts\nimport { DepOptimizationMetadata, optimizeDeps } from '../optimizer'\n\nconst runOptimize = async () => {\n  if (config.cacheDir) {\n    server._isRunningOptimizer = true;\n    try {\n      server._optimizeDepsMetadata = await optimizeDeps(config);\n    } finally {\n      server._isRunningOptimizer = false;\n    }\n    server._registerMissingImport = createMissingImporterRegisterFn(server);\n  }\n};\n```\n\n```typescript\n// server/index.ts\nimport { DepOptimizationMetadata, optimizeDeps } from '../optimizer';\n\nconst runOptimize = async () => {\n  if (config.cacheDir) {\n    server._isRunningOptimizer = true;\n    try {\n      server._optimizeDepsMetadata = await optimizeDeps(config);\n    } finally {\n      server._isRunningOptimizer = false;\n    }\n    server._registerMissingImport = createMissingImporterRegisterFn(server);\n  }\n};\n```\n\n入口代码很简单，获取了 vite 命令行参数后，创建内部 server，触发各个功能的构建。\n\n接下来进入详解 optimizeDeps 的章节。\n","source":"_posts/vite-1.md","raw":"---\ntitle: Vite 依赖解析和预构建 源码分析 - (1)代码入口\ndate: 2021-07-14 11:49:57\ntags: [工程化, Vite]\nindex_img: /img/article/vite.png\n---\n\n# Vite 依赖解析和预构建 源码分析 - (1)代码入口\n\n#### Server.listen\n\n在 cli.ts 文件中，接收命令行的运行参数。\n\n```typescript\n// 命令行输入命令启动vite\nnpm run dev\n// 根据package调用vite并获取命令参数 如--force build...\nvite xxxx xxx xxx\n```\n\nvite 运行的第一步，获取命令参数，最后创建 server 并运行 listen 函数。\n\n```typescript\n//cli.ts\n\n.action(async (root: string, options: ServerOptions & GlobalCLIOptions) => {\n        const { createServer } = await import('./server')\n        try {\n                const server = await createServer({\n                ...\n                })\n                await server.listen()\n        } catch (e) {\n                ...\n        }\n})\n```\n\nlisten 函数中，runOptimize 函数就是预构建的核心代码。\n\n```typescript\n// server/index.ts => listen\nif (!middlewareMode && httpServer) {\n  // overwrite listen to run optimizer before server start\n  const listen = httpServer.listen.bind(httpServer);\n  httpServer.listen = (async (port: number, ...args: any[]) => {\n    try {\n      await container.buildStart({});\n      await runOptimize();\n    } catch (e) {\n      httpServer.emit('error', e);\n      return;\n    }\n    return listen(port, ...args);\n  }) as any;\n  ...\n} else {\n  await container.buildStart({});\n  await runOptimize();\n}\n\n// server/index.ts\nimport { DepOptimizationMetadata, optimizeDeps } from '../optimizer'\n\nconst runOptimize = async () => {\n  if (config.cacheDir) {\n    server._isRunningOptimizer = true;\n    try {\n      server._optimizeDepsMetadata = await optimizeDeps(config);\n    } finally {\n      server._isRunningOptimizer = false;\n    }\n    server._registerMissingImport = createMissingImporterRegisterFn(server);\n  }\n};\n```\n\n```typescript\n// server/index.ts\nimport { DepOptimizationMetadata, optimizeDeps } from '../optimizer';\n\nconst runOptimize = async () => {\n  if (config.cacheDir) {\n    server._isRunningOptimizer = true;\n    try {\n      server._optimizeDepsMetadata = await optimizeDeps(config);\n    } finally {\n      server._isRunningOptimizer = false;\n    }\n    server._registerMissingImport = createMissingImporterRegisterFn(server);\n  }\n};\n```\n\n入口代码很简单，获取了 vite 命令行参数后，创建内部 server，触发各个功能的构建。\n\n接下来进入详解 optimizeDeps 的章节。\n","slug":"vite-1","published":1,"updated":"2021-07-14T03:56:15.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2yn00100022z6b7a4y6qim","content":"<h1 id=\"Vite-依赖解析和预构建-源码分析-1-代码入口\"><a href=\"#Vite-依赖解析和预构建-源码分析-1-代码入口\" class=\"headerlink\" title=\"Vite 依赖解析和预构建 源码分析 - (1)代码入口\"></a>Vite 依赖解析和预构建 源码分析 - (1)代码入口</h1><h4 id=\"Server-listen\"><a href=\"#Server-listen\" class=\"headerlink\" title=\"Server.listen\"></a>Server.listen</h4><p>在 cli.ts 文件中，接收命令行的运行参数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 命令行输入命令启动vite</span><br>npm run dev<br><span class=\"hljs-comment\">// 根据package调用vite并获取命令参数 如--force build...</span><br>vite xxxx xxx xxx<br></code></pre></td></tr></table></figure>\n\n<p>vite 运行的第一步，获取命令参数，最后创建 server 并运行 listen 函数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">//cli.ts</span><br><br>.action(<span class=\"hljs-keyword\">async</span> (root: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">options</span>: ServerOptions &amp; GlobalCLIOptions) =&gt; &#123;<br>        <span class=\"hljs-keyword\">const</span> &#123; createServer &#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;./server&#x27;</span>)<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">await</span> createServer(&#123;<br>                ...<br>                &#125;)<br>                <span class=\"hljs-keyword\">await</span> server.listen()<br>        &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>                ...<br>        &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>listen 函数中，runOptimize 函数就是预构建的核心代码。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// server/index.ts =&gt; listen</span><br><span class=\"hljs-keyword\">if</span> (!middlewareMode &amp;&amp; httpServer) &#123;<br>  <span class=\"hljs-comment\">// overwrite listen to run optimizer before server start</span><br>  <span class=\"hljs-keyword\">const</span> listen = httpServer.listen.bind(httpServer);<br>  httpServer.listen = (<span class=\"hljs-keyword\">async</span> (port: <span class=\"hljs-built_in\">number</span>, ...args: <span class=\"hljs-built_in\">any</span>[]) =&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-keyword\">await</span> container.buildStart(&#123;&#125;);<br>      <span class=\"hljs-keyword\">await</span> runOptimize();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>      httpServer.emit(<span class=\"hljs-string\">&#x27;error&#x27;</span>, e);<br>      <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> listen(port, ...args);<br>  &#125;) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>;<br>  ...<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-keyword\">await</span> container.buildStart(&#123;&#125;);<br>  <span class=\"hljs-keyword\">await</span> runOptimize();<br>&#125;<br><br><span class=\"hljs-comment\">// server/index.ts</span><br><span class=\"hljs-keyword\">import</span> &#123; DepOptimizationMetadata, optimizeDeps &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../optimizer&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> runOptimize = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">if</span> (config.cacheDir) &#123;<br>    server._isRunningOptimizer = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      server._optimizeDepsMetadata = <span class=\"hljs-keyword\">await</span> optimizeDeps(config);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>      server._isRunningOptimizer = <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    server._registerMissingImport = createMissingImporterRegisterFn(server);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// server/index.ts</span><br><span class=\"hljs-keyword\">import</span> &#123; DepOptimizationMetadata, optimizeDeps &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../optimizer&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> runOptimize = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">if</span> (config.cacheDir) &#123;<br>    server._isRunningOptimizer = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      server._optimizeDepsMetadata = <span class=\"hljs-keyword\">await</span> optimizeDeps(config);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>      server._isRunningOptimizer = <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    server._registerMissingImport = createMissingImporterRegisterFn(server);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>入口代码很简单，获取了 vite 命令行参数后，创建内部 server，触发各个功能的构建。</p>\n<p>接下来进入详解 optimizeDeps 的章节。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vite-依赖解析和预构建-源码分析-1-代码入口\"><a href=\"#Vite-依赖解析和预构建-源码分析-1-代码入口\" class=\"headerlink\" title=\"Vite 依赖解析和预构建 源码分析 - (1)代码入口\"></a>Vite 依赖解析和预构建 源码分析 - (1)代码入口</h1><h4 id=\"Server-listen\"><a href=\"#Server-listen\" class=\"headerlink\" title=\"Server.listen\"></a>Server.listen</h4><p>在 cli.ts 文件中，接收命令行的运行参数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 命令行输入命令启动vite</span><br>npm run dev<br><span class=\"hljs-comment\">// 根据package调用vite并获取命令参数 如--force build...</span><br>vite xxxx xxx xxx<br></code></pre></td></tr></table></figure>\n\n<p>vite 运行的第一步，获取命令参数，最后创建 server 并运行 listen 函数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">//cli.ts</span><br><br>.action(<span class=\"hljs-keyword\">async</span> (root: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">options</span>: ServerOptions &amp; GlobalCLIOptions) =&gt; &#123;<br>        <span class=\"hljs-keyword\">const</span> &#123; createServer &#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;./server&#x27;</span>)<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">await</span> createServer(&#123;<br>                ...<br>                &#125;)<br>                <span class=\"hljs-keyword\">await</span> server.listen()<br>        &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>                ...<br>        &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>listen 函数中，runOptimize 函数就是预构建的核心代码。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// server/index.ts =&gt; listen</span><br><span class=\"hljs-keyword\">if</span> (!middlewareMode &amp;&amp; httpServer) &#123;<br>  <span class=\"hljs-comment\">// overwrite listen to run optimizer before server start</span><br>  <span class=\"hljs-keyword\">const</span> listen = httpServer.listen.bind(httpServer);<br>  httpServer.listen = (<span class=\"hljs-keyword\">async</span> (port: <span class=\"hljs-built_in\">number</span>, ...args: <span class=\"hljs-built_in\">any</span>[]) =&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-keyword\">await</span> container.buildStart(&#123;&#125;);<br>      <span class=\"hljs-keyword\">await</span> runOptimize();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>      httpServer.emit(<span class=\"hljs-string\">&#x27;error&#x27;</span>, e);<br>      <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> listen(port, ...args);<br>  &#125;) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>;<br>  ...<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-keyword\">await</span> container.buildStart(&#123;&#125;);<br>  <span class=\"hljs-keyword\">await</span> runOptimize();<br>&#125;<br><br><span class=\"hljs-comment\">// server/index.ts</span><br><span class=\"hljs-keyword\">import</span> &#123; DepOptimizationMetadata, optimizeDeps &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../optimizer&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> runOptimize = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">if</span> (config.cacheDir) &#123;<br>    server._isRunningOptimizer = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      server._optimizeDepsMetadata = <span class=\"hljs-keyword\">await</span> optimizeDeps(config);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>      server._isRunningOptimizer = <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    server._registerMissingImport = createMissingImporterRegisterFn(server);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// server/index.ts</span><br><span class=\"hljs-keyword\">import</span> &#123; DepOptimizationMetadata, optimizeDeps &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../optimizer&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> runOptimize = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">if</span> (config.cacheDir) &#123;<br>    server._isRunningOptimizer = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      server._optimizeDepsMetadata = <span class=\"hljs-keyword\">await</span> optimizeDeps(config);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>      server._isRunningOptimizer = <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    server._registerMissingImport = createMissingImporterRegisterFn(server);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>入口代码很简单，获取了 vite 命令行参数后，创建内部 server，触发各个功能的构建。</p>\n<p>接下来进入详解 optimizeDeps 的章节。</p>\n"},{"title":"Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备","date":"2021-07-14T03:49:57.000Z","index_img":"/img/article/vite.png","_content":"\n# Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备\n\n## 预构建对象和前期准备\n\n首先获取预缓存(metadata.json)的路径，以及预构建的 hash 值，以便后续比对。\n\n这个 json 文件为 vite 处理后导出的数据信息，当此文件存在时，会比对 hash 值，如果相同就会直接读取此文件中的依赖。\n\n```typescript\n// /optimizer.ts\nasync function optimizeDeps(\n  config: ResolvedConfig,\n  force = config.server.force,\n  asCommand = false,\n  newDeps?: Record<string, string>,\n) {\n  const { root, logger, cacheDir } = config\n   // 这边第三个args为 asCommand, 是否是命令行运行的\n   // 为了讲述的流畅性，在上一章节代码入口没有提到， 在vite --force 后，会直接运行optimizeDeps函数，因此需要区分log的输出方式\n   // vite --force    =>    await optimizeDeps(config, options.force, true)\n  const log = asCommand ? logger.info : debug\n\n  if (!cacheDir) {\n    log(`No cache directory. Skipping.`)\n    return null\n\n  //这边首先获取 预构建模块路径\n  const dataPath = path.join(cacheDir, '_metadata.json'); //预缓存路径\n  // /.../my-vue-app/node_modules/.vite/_metadata.json\n  const mainHash = getDepHash(root, config);\n  // 创建一个data的对象，后面会用到\n  const data: DepOptimizationMetadata = {\n    hash: mainHash,\n    browserHash: mainHash,\n    optimized: {},\n  };\n```\n\n### 如何获取 hash 值？\n\n首先获取了预构建模块的路径，默认情况为 node_modules/.vite。\n\n以下为 metadata.json 的数据结构, 后续会说到。\n\n```json\n// node_modules/.vite/_metadata.json\n{\n  \"hash\": \"9a4fa980\",\n  \"browserHash\": \"6f00d484\",\n  \"optimized\": {\n    \"vue\": {\n      \"file\": \"/.../my-vue-app/node_modules/.vite/vue.js\",\n      \"src\": \"/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\",\n      \"needsInterop\": false\n    },\n    \"axios\": {\n      \"file\": \"/.../new/my-vue-app/node_modules/.vite/axios.js\",\n      \"src\": \"/.../new/my-vue-app/node_modules/axios/index.js\",\n      \"needsInterop\": true\n    }\n  }\n}\n```\n\n接着我们看 getDepHash 函数。\n官方文档中描述，Vite 在预构建之前，根据以下源来确定是否要重新运行预构建。\n\n- package.json 中的 dependencies 列表\n- **包管理器的 lockfile，例如 package-lock.json, yarn.lock，或者 pnpm-lock.yaml**\n- 可能在 vite.config.js 相关字段中配置过的\n\n以下代码中，变量 lockfileFormats 就是包管理器的 locakfile。\n\n```typescript\n// /optimizer.ts\nconst lockfileFormats = ['package-lock.json', 'yarn.lock', 'pnpm-lock.yaml'];\n\n// /optimizer.ts => getDepHash\nlet cachedHash: string | undefined;\n\nfunction getDepHash(root: string, config: ResolvedConfig): string {\n  if (cachedHash) {\n    return cachedHash;\n  }\n  let content = lookupFile(root, lockfileFormats) || ''; //往下滑会有lookupFile函数的解释。\n  // 这边已经获取了所有local file array 内的文件内容\n\n  // also take config into account\n  // only a subset of config options that can affect dep optimization\n\n  content += JSON.stringify(\n    {\n      mode: config.mode,\n      root: config.root,\n      resolve: config.resolve,\n      assetsInclude: config.assetsInclude,\n      plugins: config.plugins.map((p) => p.name),\n      optimizeDeps: {\n        include: config.optimizeDeps?.include, // null\n        exclude: config.optimizeDeps?.exclude, //null\n      },\n    },\n    (_, value) => {\n      if (typeof value === 'function' || value instanceof RegExp) {\n        return value.toString();\n      }\n      return value;\n    },\n  );\n  //这里不说了  最终返回 \"9a4fa980\" 八位数hash值。\n  return createHash('sha256').update(content).digest('hex').substr(0, 8);\n}\n\n// /optimizer.ts => lookupFile\nfunction lookupFile(\n  dir: string,\n  formats: string[],\n  pathOnly = false,\n): string | undefined {\n  for (const format of formats) {\n    const fullPath = path.join(dir, format); //获取root + format路径\n    // 路径对象是否存在 并且是文件\n    // pathOnly 为true就只返回路径，不然就都默认返回utf-8的文件内容\n    if (fs.existsSync(fullPath) && fs.statSync(fullPath).isFile()) {\n      return pathOnly ? fullPath : fs.readFileSync(fullPath, 'utf-8');\n    }\n  }\n  const parentDir = path.dirname(dir);\n  if (parentDir !== dir) {\n    return lookupFile(parentDir, formats, pathOnly);\n  }\n}\n```\n\n### 是否强制优化并处理.vite 文件夹\n\n获取了预构建的 hash 值后，让我退回到 optimizeDeps 函数中，继续往下看。\n\n通过参数 force 来判断是否需要强制优化，如果不需要那就对比老 hash 值，如果相等就返回老的 metadata.json 文件内容。\n\n最后处理.vite 文件夹，为后续做准备。\n\n```typescript\n// /optimizer.ts\n...\nconst data: DepOptimizationMetadata = {\n    hash: mainHash, //\"9a4fa980\"\n    browserHash: mainHash, //\"9a4fa980\"\n    optimized: {},\n  };\n\n\n// 是否强制预先优化 不管是否已经更改。\n// force = config.server.force 来源于cli.ts，获取命令行参数中是否有 --force\nif (!force) {\n  let prevData;\n  try {\n    // 尝试解析已经存在的metadata数据， 获取/.vite/metadata.json中的内容\n    prevData = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));\n  } catch (e) {}\n  // hash is consistent, no need to re-bundle\n  // 如果预dep数据的hash相同，那就直接跳过，如果需要覆盖就使用 --force\n  if (prevData && prevData.hash === data.hash) {\n    log('Hash is consistent. Skipping. Use --force to override.');\n    return prevData;\n  }\n}\n//如果 node_modules/.vite 存在，那就清空。\nif (fs.existsSync(cacheDir)) {\n  emptyDir(cacheDir);\n} else {\n  // 要不然就创建文件夹， 并且recursive：true 返回创建文件夹的路径\n  fs.mkdirSync(cacheDir, { recursive: true });\n}\n```\n\n### 获取需要编译依赖关系的模块路径\n\n解决.vite 文件夹后，我们跟着代码处理.vite 中的内容文件。\n\n这边创建了两个变量 deps 和 missing。\n\ndeps: 需要处理依赖关系的路径对象。\n\nmissing: 需要处理依赖关系但在 node_modules 中没有找到来源的数组对象。\n\n```json\n//deps\n{\n  \"vue\": \"/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\",\n  \"axios\": \"/.../my-vue-app/node_modules/axios/index.js\"\n}\n```\n\n需要提前知道的是，newDeps 这个 args 参数区分了第一次编译和已启动后遇到新依赖关系导入重写运行的编译。\n\n```typescript\n// /optimizer.ts\n\nlet deps: Record<string, string>, missing: Record<string, string>;\n// 在服务器已经启动之后，如果遇到一个新的依赖关系导入，\n// 而这个依赖关系还没有在缓存中，Vite 将重新运行依赖构建进程并重新加载页面。\n// 如上官方文档所述，最终会得出deps 和missing\nif (!newDeps) {\n  // scanImports 这里就不展开了，他的作用就是获取导入源，用正则检测后，使用esbuild编译所有的入口依赖（entries)\n  ({ deps, missing } = await scanImports(config));\n} else {\n  deps = newDeps;\n  missing = {};\n}\n// 重写更新了浏览器的哈希\n// update browser hash\ndata.browserHash = createHash('sha256')\n  .update(data.hash + JSON.stringify(deps))\n  .digest('hex')\n  .substr(0, 8);\n```\n\n### 没有找到来源的模块处理(missing)\n\n下面代码很简单，处理在 node_modules 中没有找到来源的模块。\n\n```typescript\n// /optimizer.ts\n\n// missing是一个储存需要处理依赖关系但在 node_modules 中没有找到来源的数组对象，如果有的话直接error提醒一波。\nconst missingIds = Object.keys(missing);\nif (missingIds.length) {\n  throw new Error(\n    `The following dependencies are imported but could not be resolved:\\n\\n  ${missingIds\n      .map(\n        (id) =>\n          `${chalk.cyan(id)} ${chalk.white.dim(\n            `(imported by ${missing[id]})`,\n          )}`,\n      )\n      .join(`\\n  `)}\\n\\nAre they installed?`,\n  );\n}\n```\n\n### 获取并导入 自定义的强制预构建(include)\n\n接着处理在 vite.config.js 中 optimizeDeps.include。\n\n如官方文档 API 所述，\n\noptimizeDeps.include: 默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包\n\n```typescript\n// /optimizer.ts\n\n//config中是否有需要强制构建的依赖项, 处理后再deps中加入\nconst include = config.optimizeDeps?.include;\nif (include) {\n  const resolve = config.createResolver({ asSrc: false });\n  for (const id of include) {\n    if (!deps[id]) {\n      const entry = await resolve(id);\n      if (entry) {\n        deps[id] = entry;\n      } else {\n        throw new Error(\n          `Failed to resolve force included dependency: ${chalk.cyan(id)}`,\n        );\n      }\n    }\n  }\n}\n```\n\n### 命令行打印需要构建模块的信息\n\n```typescript\n// /optimizer.ts\n\nconst qualifiedIds = Object.keys(deps);\n//不用说很简单，没有需要依赖的dep就跳过\nif (!qualifiedIds.length) {\n  writeFile(dataPath, JSON.stringify(data, null, 2));\n  log(`No dependencies to bundle. Skipping.\\n\\n\\n`);\n  return data;\n}\n\n// 这里也不用解释太多，基本上就是打印出信息的逻辑，然后绿色高亮告诉你要预缓存巴拉巴拉\nconst total = qualifiedIds.length;\nconst maxListed = 5;\nconst listed = Math.min(total, maxListed);\nconst extra = Math.max(0, total - maxListed);\nconst depsString = chalk.yellow(\n  qualifiedIds.slice(0, listed).join(`\\n  `) +\n    (extra > 0 ? `\\n  (...and ${extra} more)` : ``),\n);\nif (!asCommand) {\n  if (!newDeps) {\n    // This is auto run on server start - let the user know that we are\n    // pre-optimizing deps\n    logger.info(\n      chalk.greenBright(`Pre-bundling dependencies:\\n  ${depsString}`),\n    );\n    logger.info(\n      `(this will be run only when your dependencies or config have changed)`,\n    );\n  }\n} else {\n  logger.info(chalk.greenBright(`Optimizing dependencies:\\n  ${depsString}`));\n}\n```\n\n### 创建预构建对象\n\n使用 es-module-lexer 模块获取每个 deps 中的预构建模块文件，输出引入和导出的数据并保存。\n\n```typescript\n// /optimizer.ts\n\nimport { ImportSpecifier, init, parse } from 'es-module-lexer';\n\n// esbuild generates nested directory output with lowest common ancestor base\n// this is unpredictable and makes it difficult to analyze entry / output\n// mapping. So what we do here is:\n// 1. flatten all ids to eliminate slash\n// 2. in the plugin, read the entry ourselves as virtual files to retain the\n//    path.\nconst flatIdDeps: Record<string, string> = {};\nconst idToExports: Record<string, ExportsData> = {};\nconst flatIdToExports: Record<string, ExportsData> = {};\n// 运行es-module-lexer的初始化函数，后续会用到\nawait init;\n\nfor (const id in deps) {\n  // 替换id中的斜杠变成下划线 node/abc => node_abc\n  const flatId = flattenId(id);\n  flatIdDeps[flatId] = deps[id];\n  // 获取每个依赖源的文件内容\n  //{ vue: '/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js',\n  // 'element-plus': '/.../my-vue-app/node_modules/element-plus/lib/index.esm.js',\n  //  axios: '/.../my-vue-app/node_modules/axios/index.js' }\n  const entryContent = fs.readFileSync(deps[id], 'utf-8');\n  // parse出自es-module-lexer，这个包是一个js模块语法词法分析器，体积非常小\n  // 解析出后的ExportsData 是一个数组，[0]是imports, [1]是exports\n  const exportsData = parse(entryContent) as ExportsData;\n\n  /*\n    ss/se => statement start/end 缩写, {number} import的开始和结束index\n    这里以vue举例，parse返回的值 =>  ss = 0 se = 60\n    entryContent.slice(0, 60) => \"import { initCustomFormatter, warn } from '@vue/runtime-dom'\"\n    entryContent.slice(62, 94) => \"export * from '@vue/runtime-dom\"\n    最后标注需要特殊处理的 export from\n  */\n  for (const { ss, se } of exportsData[0]) {\n    const exp = entryContent.slice(ss, se);\n    if (/export\\s+\\*\\s+from/.test(exp)) {\n      exportsData.hasReExports = true; //待定\n    }\n  }\n  // 分别记录以id flatId的exportsData\n  // exportsData数据太多这里就不贴了，总之里面包含每个构建模块中的import和export的数据。\n  idToExports[id] = exportsData;\n  flatIdToExports[flatId] = exportsData;\n}\n```\n\n### 总结\n\n上述描述代码中，我们理一下当前的逻辑。\n\n1. 获取了预构建模块的内容（hash 值，优化对象等）。\n2. 获取包管理器的 lockfile 转换的 hash 值，判断是否需要重新运行预构建。\n3. 获取需要编译依赖关系的模块路径（deps）和需要编译但没找到来源的模块（missing)。\n4. 处理 missing 数组，打印 error 提示是否已安装来源。\n5. 获取 vite.config.js 中自定义强制预构建的模块路径(include)，加入 deps 对象中。\n6. 命令行打印需要构建模块的信息。\n\n   ![pre-build](/images/pre-build.png)\n\n7. 创建预构建对象，获取预构建对象中的引入导出数据并记录。\n\n**处理完各种琐事之后，我们获取了需要构建的 deps 对象，接下来进入下一章节来解析 deps 对象。**\n","source":"_posts/vite-2.md","raw":"---\ntitle: Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备\ndate: 2021-07-14 11:49:57\ntags: [工程化, Vite]\nindex_img: /img/article/vite.png\n---\n\n# Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备\n\n## 预构建对象和前期准备\n\n首先获取预缓存(metadata.json)的路径，以及预构建的 hash 值，以便后续比对。\n\n这个 json 文件为 vite 处理后导出的数据信息，当此文件存在时，会比对 hash 值，如果相同就会直接读取此文件中的依赖。\n\n```typescript\n// /optimizer.ts\nasync function optimizeDeps(\n  config: ResolvedConfig,\n  force = config.server.force,\n  asCommand = false,\n  newDeps?: Record<string, string>,\n) {\n  const { root, logger, cacheDir } = config\n   // 这边第三个args为 asCommand, 是否是命令行运行的\n   // 为了讲述的流畅性，在上一章节代码入口没有提到， 在vite --force 后，会直接运行optimizeDeps函数，因此需要区分log的输出方式\n   // vite --force    =>    await optimizeDeps(config, options.force, true)\n  const log = asCommand ? logger.info : debug\n\n  if (!cacheDir) {\n    log(`No cache directory. Skipping.`)\n    return null\n\n  //这边首先获取 预构建模块路径\n  const dataPath = path.join(cacheDir, '_metadata.json'); //预缓存路径\n  // /.../my-vue-app/node_modules/.vite/_metadata.json\n  const mainHash = getDepHash(root, config);\n  // 创建一个data的对象，后面会用到\n  const data: DepOptimizationMetadata = {\n    hash: mainHash,\n    browserHash: mainHash,\n    optimized: {},\n  };\n```\n\n### 如何获取 hash 值？\n\n首先获取了预构建模块的路径，默认情况为 node_modules/.vite。\n\n以下为 metadata.json 的数据结构, 后续会说到。\n\n```json\n// node_modules/.vite/_metadata.json\n{\n  \"hash\": \"9a4fa980\",\n  \"browserHash\": \"6f00d484\",\n  \"optimized\": {\n    \"vue\": {\n      \"file\": \"/.../my-vue-app/node_modules/.vite/vue.js\",\n      \"src\": \"/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\",\n      \"needsInterop\": false\n    },\n    \"axios\": {\n      \"file\": \"/.../new/my-vue-app/node_modules/.vite/axios.js\",\n      \"src\": \"/.../new/my-vue-app/node_modules/axios/index.js\",\n      \"needsInterop\": true\n    }\n  }\n}\n```\n\n接着我们看 getDepHash 函数。\n官方文档中描述，Vite 在预构建之前，根据以下源来确定是否要重新运行预构建。\n\n- package.json 中的 dependencies 列表\n- **包管理器的 lockfile，例如 package-lock.json, yarn.lock，或者 pnpm-lock.yaml**\n- 可能在 vite.config.js 相关字段中配置过的\n\n以下代码中，变量 lockfileFormats 就是包管理器的 locakfile。\n\n```typescript\n// /optimizer.ts\nconst lockfileFormats = ['package-lock.json', 'yarn.lock', 'pnpm-lock.yaml'];\n\n// /optimizer.ts => getDepHash\nlet cachedHash: string | undefined;\n\nfunction getDepHash(root: string, config: ResolvedConfig): string {\n  if (cachedHash) {\n    return cachedHash;\n  }\n  let content = lookupFile(root, lockfileFormats) || ''; //往下滑会有lookupFile函数的解释。\n  // 这边已经获取了所有local file array 内的文件内容\n\n  // also take config into account\n  // only a subset of config options that can affect dep optimization\n\n  content += JSON.stringify(\n    {\n      mode: config.mode,\n      root: config.root,\n      resolve: config.resolve,\n      assetsInclude: config.assetsInclude,\n      plugins: config.plugins.map((p) => p.name),\n      optimizeDeps: {\n        include: config.optimizeDeps?.include, // null\n        exclude: config.optimizeDeps?.exclude, //null\n      },\n    },\n    (_, value) => {\n      if (typeof value === 'function' || value instanceof RegExp) {\n        return value.toString();\n      }\n      return value;\n    },\n  );\n  //这里不说了  最终返回 \"9a4fa980\" 八位数hash值。\n  return createHash('sha256').update(content).digest('hex').substr(0, 8);\n}\n\n// /optimizer.ts => lookupFile\nfunction lookupFile(\n  dir: string,\n  formats: string[],\n  pathOnly = false,\n): string | undefined {\n  for (const format of formats) {\n    const fullPath = path.join(dir, format); //获取root + format路径\n    // 路径对象是否存在 并且是文件\n    // pathOnly 为true就只返回路径，不然就都默认返回utf-8的文件内容\n    if (fs.existsSync(fullPath) && fs.statSync(fullPath).isFile()) {\n      return pathOnly ? fullPath : fs.readFileSync(fullPath, 'utf-8');\n    }\n  }\n  const parentDir = path.dirname(dir);\n  if (parentDir !== dir) {\n    return lookupFile(parentDir, formats, pathOnly);\n  }\n}\n```\n\n### 是否强制优化并处理.vite 文件夹\n\n获取了预构建的 hash 值后，让我退回到 optimizeDeps 函数中，继续往下看。\n\n通过参数 force 来判断是否需要强制优化，如果不需要那就对比老 hash 值，如果相等就返回老的 metadata.json 文件内容。\n\n最后处理.vite 文件夹，为后续做准备。\n\n```typescript\n// /optimizer.ts\n...\nconst data: DepOptimizationMetadata = {\n    hash: mainHash, //\"9a4fa980\"\n    browserHash: mainHash, //\"9a4fa980\"\n    optimized: {},\n  };\n\n\n// 是否强制预先优化 不管是否已经更改。\n// force = config.server.force 来源于cli.ts，获取命令行参数中是否有 --force\nif (!force) {\n  let prevData;\n  try {\n    // 尝试解析已经存在的metadata数据， 获取/.vite/metadata.json中的内容\n    prevData = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));\n  } catch (e) {}\n  // hash is consistent, no need to re-bundle\n  // 如果预dep数据的hash相同，那就直接跳过，如果需要覆盖就使用 --force\n  if (prevData && prevData.hash === data.hash) {\n    log('Hash is consistent. Skipping. Use --force to override.');\n    return prevData;\n  }\n}\n//如果 node_modules/.vite 存在，那就清空。\nif (fs.existsSync(cacheDir)) {\n  emptyDir(cacheDir);\n} else {\n  // 要不然就创建文件夹， 并且recursive：true 返回创建文件夹的路径\n  fs.mkdirSync(cacheDir, { recursive: true });\n}\n```\n\n### 获取需要编译依赖关系的模块路径\n\n解决.vite 文件夹后，我们跟着代码处理.vite 中的内容文件。\n\n这边创建了两个变量 deps 和 missing。\n\ndeps: 需要处理依赖关系的路径对象。\n\nmissing: 需要处理依赖关系但在 node_modules 中没有找到来源的数组对象。\n\n```json\n//deps\n{\n  \"vue\": \"/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\",\n  \"axios\": \"/.../my-vue-app/node_modules/axios/index.js\"\n}\n```\n\n需要提前知道的是，newDeps 这个 args 参数区分了第一次编译和已启动后遇到新依赖关系导入重写运行的编译。\n\n```typescript\n// /optimizer.ts\n\nlet deps: Record<string, string>, missing: Record<string, string>;\n// 在服务器已经启动之后，如果遇到一个新的依赖关系导入，\n// 而这个依赖关系还没有在缓存中，Vite 将重新运行依赖构建进程并重新加载页面。\n// 如上官方文档所述，最终会得出deps 和missing\nif (!newDeps) {\n  // scanImports 这里就不展开了，他的作用就是获取导入源，用正则检测后，使用esbuild编译所有的入口依赖（entries)\n  ({ deps, missing } = await scanImports(config));\n} else {\n  deps = newDeps;\n  missing = {};\n}\n// 重写更新了浏览器的哈希\n// update browser hash\ndata.browserHash = createHash('sha256')\n  .update(data.hash + JSON.stringify(deps))\n  .digest('hex')\n  .substr(0, 8);\n```\n\n### 没有找到来源的模块处理(missing)\n\n下面代码很简单，处理在 node_modules 中没有找到来源的模块。\n\n```typescript\n// /optimizer.ts\n\n// missing是一个储存需要处理依赖关系但在 node_modules 中没有找到来源的数组对象，如果有的话直接error提醒一波。\nconst missingIds = Object.keys(missing);\nif (missingIds.length) {\n  throw new Error(\n    `The following dependencies are imported but could not be resolved:\\n\\n  ${missingIds\n      .map(\n        (id) =>\n          `${chalk.cyan(id)} ${chalk.white.dim(\n            `(imported by ${missing[id]})`,\n          )}`,\n      )\n      .join(`\\n  `)}\\n\\nAre they installed?`,\n  );\n}\n```\n\n### 获取并导入 自定义的强制预构建(include)\n\n接着处理在 vite.config.js 中 optimizeDeps.include。\n\n如官方文档 API 所述，\n\noptimizeDeps.include: 默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包\n\n```typescript\n// /optimizer.ts\n\n//config中是否有需要强制构建的依赖项, 处理后再deps中加入\nconst include = config.optimizeDeps?.include;\nif (include) {\n  const resolve = config.createResolver({ asSrc: false });\n  for (const id of include) {\n    if (!deps[id]) {\n      const entry = await resolve(id);\n      if (entry) {\n        deps[id] = entry;\n      } else {\n        throw new Error(\n          `Failed to resolve force included dependency: ${chalk.cyan(id)}`,\n        );\n      }\n    }\n  }\n}\n```\n\n### 命令行打印需要构建模块的信息\n\n```typescript\n// /optimizer.ts\n\nconst qualifiedIds = Object.keys(deps);\n//不用说很简单，没有需要依赖的dep就跳过\nif (!qualifiedIds.length) {\n  writeFile(dataPath, JSON.stringify(data, null, 2));\n  log(`No dependencies to bundle. Skipping.\\n\\n\\n`);\n  return data;\n}\n\n// 这里也不用解释太多，基本上就是打印出信息的逻辑，然后绿色高亮告诉你要预缓存巴拉巴拉\nconst total = qualifiedIds.length;\nconst maxListed = 5;\nconst listed = Math.min(total, maxListed);\nconst extra = Math.max(0, total - maxListed);\nconst depsString = chalk.yellow(\n  qualifiedIds.slice(0, listed).join(`\\n  `) +\n    (extra > 0 ? `\\n  (...and ${extra} more)` : ``),\n);\nif (!asCommand) {\n  if (!newDeps) {\n    // This is auto run on server start - let the user know that we are\n    // pre-optimizing deps\n    logger.info(\n      chalk.greenBright(`Pre-bundling dependencies:\\n  ${depsString}`),\n    );\n    logger.info(\n      `(this will be run only when your dependencies or config have changed)`,\n    );\n  }\n} else {\n  logger.info(chalk.greenBright(`Optimizing dependencies:\\n  ${depsString}`));\n}\n```\n\n### 创建预构建对象\n\n使用 es-module-lexer 模块获取每个 deps 中的预构建模块文件，输出引入和导出的数据并保存。\n\n```typescript\n// /optimizer.ts\n\nimport { ImportSpecifier, init, parse } from 'es-module-lexer';\n\n// esbuild generates nested directory output with lowest common ancestor base\n// this is unpredictable and makes it difficult to analyze entry / output\n// mapping. So what we do here is:\n// 1. flatten all ids to eliminate slash\n// 2. in the plugin, read the entry ourselves as virtual files to retain the\n//    path.\nconst flatIdDeps: Record<string, string> = {};\nconst idToExports: Record<string, ExportsData> = {};\nconst flatIdToExports: Record<string, ExportsData> = {};\n// 运行es-module-lexer的初始化函数，后续会用到\nawait init;\n\nfor (const id in deps) {\n  // 替换id中的斜杠变成下划线 node/abc => node_abc\n  const flatId = flattenId(id);\n  flatIdDeps[flatId] = deps[id];\n  // 获取每个依赖源的文件内容\n  //{ vue: '/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js',\n  // 'element-plus': '/.../my-vue-app/node_modules/element-plus/lib/index.esm.js',\n  //  axios: '/.../my-vue-app/node_modules/axios/index.js' }\n  const entryContent = fs.readFileSync(deps[id], 'utf-8');\n  // parse出自es-module-lexer，这个包是一个js模块语法词法分析器，体积非常小\n  // 解析出后的ExportsData 是一个数组，[0]是imports, [1]是exports\n  const exportsData = parse(entryContent) as ExportsData;\n\n  /*\n    ss/se => statement start/end 缩写, {number} import的开始和结束index\n    这里以vue举例，parse返回的值 =>  ss = 0 se = 60\n    entryContent.slice(0, 60) => \"import { initCustomFormatter, warn } from '@vue/runtime-dom'\"\n    entryContent.slice(62, 94) => \"export * from '@vue/runtime-dom\"\n    最后标注需要特殊处理的 export from\n  */\n  for (const { ss, se } of exportsData[0]) {\n    const exp = entryContent.slice(ss, se);\n    if (/export\\s+\\*\\s+from/.test(exp)) {\n      exportsData.hasReExports = true; //待定\n    }\n  }\n  // 分别记录以id flatId的exportsData\n  // exportsData数据太多这里就不贴了，总之里面包含每个构建模块中的import和export的数据。\n  idToExports[id] = exportsData;\n  flatIdToExports[flatId] = exportsData;\n}\n```\n\n### 总结\n\n上述描述代码中，我们理一下当前的逻辑。\n\n1. 获取了预构建模块的内容（hash 值，优化对象等）。\n2. 获取包管理器的 lockfile 转换的 hash 值，判断是否需要重新运行预构建。\n3. 获取需要编译依赖关系的模块路径（deps）和需要编译但没找到来源的模块（missing)。\n4. 处理 missing 数组，打印 error 提示是否已安装来源。\n5. 获取 vite.config.js 中自定义强制预构建的模块路径(include)，加入 deps 对象中。\n6. 命令行打印需要构建模块的信息。\n\n   ![pre-build](/images/pre-build.png)\n\n7. 创建预构建对象，获取预构建对象中的引入导出数据并记录。\n\n**处理完各种琐事之后，我们获取了需要构建的 deps 对象，接下来进入下一章节来解析 deps 对象。**\n","slug":"vite-2","published":1,"updated":"2021-07-14T03:56:34.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2yn00400042z6b62ilfx0g","content":"<h1 id=\"Vite-依赖解析和预构建-源码分析-2-预构建对象和前期准备\"><a href=\"#Vite-依赖解析和预构建-源码分析-2-预构建对象和前期准备\" class=\"headerlink\" title=\"Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备\"></a>Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备</h1><h2 id=\"预构建对象和前期准备\"><a href=\"#预构建对象和前期准备\" class=\"headerlink\" title=\"预构建对象和前期准备\"></a>预构建对象和前期准备</h2><p>首先获取预缓存(metadata.json)的路径，以及预构建的 hash 值，以便后续比对。</p>\n<p>这个 json 文件为 vite 处理后导出的数据信息，当此文件存在时，会比对 hash 值，如果相同就会直接读取此文件中的依赖。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">optimizeDeps</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  config: ResolvedConfig,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  force = config.server.force,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  asCommand = <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  newDeps?: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; root, logger, cacheDir &#125; = config<br>   <span class=\"hljs-comment\">// 这边第三个args为 asCommand, 是否是命令行运行的</span><br>   <span class=\"hljs-comment\">// 为了讲述的流畅性，在上一章节代码入口没有提到， 在vite --force 后，会直接运行optimizeDeps函数，因此需要区分log的输出方式</span><br>   <span class=\"hljs-comment\">// vite --force    =&gt;    await optimizeDeps(config, options.force, true)</span><br>  <span class=\"hljs-keyword\">const</span> log = asCommand ? logger.info : debug<br><br>  <span class=\"hljs-keyword\">if</span> (!cacheDir) &#123;<br>    log(<span class=\"hljs-string\">`No cache directory. Skipping.`</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br><br>  <span class=\"hljs-comment\">//这边首先获取 预构建模块路径</span><br>  <span class=\"hljs-keyword\">const</span> dataPath = path.join(cacheDir, <span class=\"hljs-string\">&#x27;_metadata.json&#x27;</span>); <span class=\"hljs-comment\">//预缓存路径</span><br>  <span class=\"hljs-comment\">// /.../my-vue-app/node_modules/.vite/_metadata.json</span><br>  <span class=\"hljs-keyword\">const</span> mainHash = getDepHash(root, config);<br>  <span class=\"hljs-comment\">// 创建一个data的对象，后面会用到</span><br>  <span class=\"hljs-keyword\">const</span> data: DepOptimizationMetadata = &#123;<br>    <span class=\"hljs-attr\">hash</span>: mainHash,<br>    <span class=\"hljs-attr\">browserHash</span>: mainHash,<br>    <span class=\"hljs-attr\">optimized</span>: &#123;&#125;,<br>  &#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"如何获取-hash-值？\"><a href=\"#如何获取-hash-值？\" class=\"headerlink\" title=\"如何获取 hash 值？\"></a>如何获取 hash 值？</h3><p>首先获取了预构建模块的路径，默认情况为 node_modules/.vite。</p>\n<p>以下为 metadata.json 的数据结构, 后续会说到。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// node_modules/.vite/_metadata.json</span><br>&#123;<br>  <span class=\"hljs-attr\">&quot;hash&quot;</span>: <span class=\"hljs-string\">&quot;9a4fa980&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;browserHash&quot;</span>: <span class=\"hljs-string\">&quot;6f00d484&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;optimized&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;vue&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;file&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/.vite/vue.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;src&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;needsInterop&quot;</span>: <span class=\"hljs-literal\">false</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;axios&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;file&quot;</span>: <span class=\"hljs-string\">&quot;/.../new/my-vue-app/node_modules/.vite/axios.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;src&quot;</span>: <span class=\"hljs-string\">&quot;/.../new/my-vue-app/node_modules/axios/index.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;needsInterop&quot;</span>: <span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着我们看 getDepHash 函数。<br>官方文档中描述，Vite 在预构建之前，根据以下源来确定是否要重新运行预构建。</p>\n<ul>\n<li>package.json 中的 dependencies 列表</li>\n<li><strong>包管理器的 lockfile，例如 package-lock.json, yarn.lock，或者 pnpm-lock.yaml</strong></li>\n<li>可能在 vite.config.js 相关字段中配置过的</li>\n</ul>\n<p>以下代码中，变量 lockfileFormats 就是包管理器的 locakfile。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><span class=\"hljs-keyword\">const</span> lockfileFormats = [<span class=\"hljs-string\">&#x27;package-lock.json&#x27;</span>, <span class=\"hljs-string\">&#x27;yarn.lock&#x27;</span>, <span class=\"hljs-string\">&#x27;pnpm-lock.yaml&#x27;</span>];<br><br><span class=\"hljs-comment\">// /optimizer.ts =&gt; getDepHash</span><br><span class=\"hljs-keyword\">let</span> cachedHash: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDepHash</span>(<span class=\"hljs-params\">root: <span class=\"hljs-built_in\">string</span>, config: ResolvedConfig</span>): <span class=\"hljs-title\">string</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (cachedHash) &#123;<br>    <span class=\"hljs-keyword\">return</span> cachedHash;<br>  &#125;<br>  <span class=\"hljs-keyword\">let</span> content = lookupFile(root, lockfileFormats) || <span class=\"hljs-string\">&#x27;&#x27;</span>; <span class=\"hljs-comment\">//往下滑会有lookupFile函数的解释。</span><br>  <span class=\"hljs-comment\">// 这边已经获取了所有local file array 内的文件内容</span><br><br>  <span class=\"hljs-comment\">// also take config into account</span><br>  <span class=\"hljs-comment\">// only a subset of config options that can affect dep optimization</span><br><br>  content += <span class=\"hljs-built_in\">JSON</span>.stringify(<br>    &#123;<br>      <span class=\"hljs-attr\">mode</span>: config.mode,<br>      <span class=\"hljs-attr\">root</span>: config.root,<br>      <span class=\"hljs-attr\">resolve</span>: config.resolve,<br>      <span class=\"hljs-attr\">assetsInclude</span>: config.assetsInclude,<br>      <span class=\"hljs-attr\">plugins</span>: config.plugins.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> p.name),<br>      <span class=\"hljs-attr\">optimizeDeps</span>: &#123;<br>        <span class=\"hljs-attr\">include</span>: config.optimizeDeps?.include, <span class=\"hljs-comment\">// null</span><br>        <span class=\"hljs-attr\">exclude</span>: config.optimizeDeps?.exclude, <span class=\"hljs-comment\">//null</span><br>      &#125;,<br>    &#125;,<br>    <span class=\"hljs-function\">(<span class=\"hljs-params\">_, value</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">&#x27;function&#x27;</span> || value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">RegExp</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> value.toString();<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> value;<br>    &#125;,<br>  );<br>  <span class=\"hljs-comment\">//这里不说了  最终返回 &quot;9a4fa980&quot; 八位数hash值。</span><br>  <span class=\"hljs-keyword\">return</span> createHash(<span class=\"hljs-string\">&#x27;sha256&#x27;</span>).update(content).digest(<span class=\"hljs-string\">&#x27;hex&#x27;</span>).substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// /optimizer.ts =&gt; lookupFile</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lookupFile</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  dir: <span class=\"hljs-built_in\">string</span>,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  formats: <span class=\"hljs-built_in\">string</span>[],</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  pathOnly = <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>): <span class=\"hljs-title\">string</span> | <span class=\"hljs-title\">undefined</span> </span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> format <span class=\"hljs-keyword\">of</span> formats) &#123;<br>    <span class=\"hljs-keyword\">const</span> fullPath = path.join(dir, format); <span class=\"hljs-comment\">//获取root + format路径</span><br>    <span class=\"hljs-comment\">// 路径对象是否存在 并且是文件</span><br>    <span class=\"hljs-comment\">// pathOnly 为true就只返回路径，不然就都默认返回utf-8的文件内容</span><br>    <span class=\"hljs-keyword\">if</span> (fs.existsSync(fullPath) &amp;&amp; fs.statSync(fullPath).isFile()) &#123;<br>      <span class=\"hljs-keyword\">return</span> pathOnly ? fullPath : fs.readFileSync(fullPath, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> parentDir = path.dirname(dir);<br>  <span class=\"hljs-keyword\">if</span> (parentDir !== dir) &#123;<br>    <span class=\"hljs-keyword\">return</span> lookupFile(parentDir, formats, pathOnly);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"是否强制优化并处理-vite-文件夹\"><a href=\"#是否强制优化并处理-vite-文件夹\" class=\"headerlink\" title=\"是否强制优化并处理.vite 文件夹\"></a>是否强制优化并处理.vite 文件夹</h3><p>获取了预构建的 hash 值后，让我退回到 optimizeDeps 函数中，继续往下看。</p>\n<p>通过参数 force 来判断是否需要强制优化，如果不需要那就对比老 hash 值，如果相等就返回老的 metadata.json 文件内容。</p>\n<p>最后处理.vite 文件夹，为后续做准备。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br>...<br><span class=\"hljs-keyword\">const</span> data: DepOptimizationMetadata = &#123;<br>    <span class=\"hljs-attr\">hash</span>: mainHash, <span class=\"hljs-comment\">//&quot;9a4fa980&quot;</span><br>    <span class=\"hljs-attr\">browserHash</span>: mainHash, <span class=\"hljs-comment\">//&quot;9a4fa980&quot;</span><br>    <span class=\"hljs-attr\">optimized</span>: &#123;&#125;,<br>  &#125;;<br><br><br><span class=\"hljs-comment\">// 是否强制预先优化 不管是否已经更改。</span><br><span class=\"hljs-comment\">// force = config.server.force 来源于cli.ts，获取命令行参数中是否有 --force</span><br><span class=\"hljs-keyword\">if</span> (!force) &#123;<br>  <span class=\"hljs-keyword\">let</span> prevData;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-comment\">// 尝试解析已经存在的metadata数据， 获取/.vite/metadata.json中的内容</span><br>    prevData = <span class=\"hljs-built_in\">JSON</span>.parse(fs.readFileSync(dataPath, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>));<br>  &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;&#125;<br>  <span class=\"hljs-comment\">// hash is consistent, no need to re-bundle</span><br>  <span class=\"hljs-comment\">// 如果预dep数据的hash相同，那就直接跳过，如果需要覆盖就使用 --force</span><br>  <span class=\"hljs-keyword\">if</span> (prevData &amp;&amp; prevData.hash === data.hash) &#123;<br>    log(<span class=\"hljs-string\">&#x27;Hash is consistent. Skipping. Use --force to override.&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> prevData;<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">//如果 node_modules/.vite 存在，那就清空。</span><br><span class=\"hljs-keyword\">if</span> (fs.existsSync(cacheDir)) &#123;<br>  emptyDir(cacheDir);<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-comment\">// 要不然就创建文件夹， 并且recursive：true 返回创建文件夹的路径</span><br>  fs.mkdirSync(cacheDir, &#123; <span class=\"hljs-attr\">recursive</span>: <span class=\"hljs-literal\">true</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取需要编译依赖关系的模块路径\"><a href=\"#获取需要编译依赖关系的模块路径\" class=\"headerlink\" title=\"获取需要编译依赖关系的模块路径\"></a>获取需要编译依赖关系的模块路径</h3><p>解决.vite 文件夹后，我们跟着代码处理.vite 中的内容文件。</p>\n<p>这边创建了两个变量 deps 和 missing。</p>\n<p>deps: 需要处理依赖关系的路径对象。</p>\n<p>missing: 需要处理依赖关系但在 node_modules 中没有找到来源的数组对象。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">//deps</span><br>&#123;<br>  <span class=\"hljs-attr\">&quot;vue&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;axios&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/axios/index.js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>需要提前知道的是，newDeps 这个 args 参数区分了第一次编译和已启动后遇到新依赖关系导入重写运行的编译。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-keyword\">let</span> deps: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;, missing: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;;<br><span class=\"hljs-comment\">// 在服务器已经启动之后，如果遇到一个新的依赖关系导入，</span><br><span class=\"hljs-comment\">// 而这个依赖关系还没有在缓存中，Vite 将重新运行依赖构建进程并重新加载页面。</span><br><span class=\"hljs-comment\">// 如上官方文档所述，最终会得出deps 和missing</span><br><span class=\"hljs-keyword\">if</span> (!newDeps) &#123;<br>  <span class=\"hljs-comment\">// scanImports 这里就不展开了，他的作用就是获取导入源，用正则检测后，使用esbuild编译所有的入口依赖（entries)</span><br>  (&#123; deps, missing &#125; = <span class=\"hljs-keyword\">await</span> scanImports(config));<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  deps = newDeps;<br>  missing = &#123;&#125;;<br>&#125;<br><span class=\"hljs-comment\">// 重写更新了浏览器的哈希</span><br><span class=\"hljs-comment\">// update browser hash</span><br>data.browserHash = createHash(<span class=\"hljs-string\">&#x27;sha256&#x27;</span>)<br>  .update(data.hash + <span class=\"hljs-built_in\">JSON</span>.stringify(deps))<br>  .digest(<span class=\"hljs-string\">&#x27;hex&#x27;</span>)<br>  .substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"没有找到来源的模块处理-missing\"><a href=\"#没有找到来源的模块处理-missing\" class=\"headerlink\" title=\"没有找到来源的模块处理(missing)\"></a>没有找到来源的模块处理(missing)</h3><p>下面代码很简单，处理在 node_modules 中没有找到来源的模块。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-comment\">// missing是一个储存需要处理依赖关系但在 node_modules 中没有找到来源的数组对象，如果有的话直接error提醒一波。</span><br><span class=\"hljs-keyword\">const</span> missingIds = <span class=\"hljs-built_in\">Object</span>.keys(missing);<br><span class=\"hljs-keyword\">if</span> (missingIds.length) &#123;<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<br>    <span class=\"hljs-string\">`The following dependencies are imported but could not be resolved:\\n\\n  <span class=\"hljs-subst\">$&#123;missingIds</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">      .map(</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">        (id) =&gt;</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">          <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;chalk.cyan(id)&#125;</span> <span class=\"hljs-subst\">$&#123;chalk.white.dim(</span></span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">            <span class=\"hljs-string\">`(imported by <span class=\"hljs-subst\">$&#123;missing[id]&#125;</span>)`</span>,</span></span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">          )&#125;</span>`</span>,</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">      )</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">      .join(<span class=\"hljs-string\">`\\n  `</span>)&#125;</span>\\n\\nAre they installed?`</span>,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取并导入-自定义的强制预构建-include\"><a href=\"#获取并导入-自定义的强制预构建-include\" class=\"headerlink\" title=\"获取并导入 自定义的强制预构建(include)\"></a>获取并导入 自定义的强制预构建(include)</h3><p>接着处理在 vite.config.js 中 optimizeDeps.include。</p>\n<p>如官方文档 API 所述，</p>\n<p>optimizeDeps.include: 默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-comment\">//config中是否有需要强制构建的依赖项, 处理后再deps中加入</span><br><span class=\"hljs-keyword\">const</span> include = config.optimizeDeps?.include;<br><span class=\"hljs-keyword\">if</span> (include) &#123;<br>  <span class=\"hljs-keyword\">const</span> resolve = config.createResolver(&#123; <span class=\"hljs-attr\">asSrc</span>: <span class=\"hljs-literal\">false</span> &#125;);<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> id <span class=\"hljs-keyword\">of</span> include) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!deps[id]) &#123;<br>      <span class=\"hljs-keyword\">const</span> entry = <span class=\"hljs-keyword\">await</span> resolve(id);<br>      <span class=\"hljs-keyword\">if</span> (entry) &#123;<br>        deps[id] = entry;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<br>          <span class=\"hljs-string\">`Failed to resolve force included dependency: <span class=\"hljs-subst\">$&#123;chalk.cyan(id)&#125;</span>`</span>,<br>        );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"命令行打印需要构建模块的信息\"><a href=\"#命令行打印需要构建模块的信息\" class=\"headerlink\" title=\"命令行打印需要构建模块的信息\"></a>命令行打印需要构建模块的信息</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-keyword\">const</span> qualifiedIds = <span class=\"hljs-built_in\">Object</span>.keys(deps);<br><span class=\"hljs-comment\">//不用说很简单，没有需要依赖的dep就跳过</span><br><span class=\"hljs-keyword\">if</span> (!qualifiedIds.length) &#123;<br>  writeFile(dataPath, <span class=\"hljs-built_in\">JSON</span>.stringify(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  log(<span class=\"hljs-string\">`No dependencies to bundle. Skipping.\\n\\n\\n`</span>);<br>  <span class=\"hljs-keyword\">return</span> data;<br>&#125;<br><br><span class=\"hljs-comment\">// 这里也不用解释太多，基本上就是打印出信息的逻辑，然后绿色高亮告诉你要预缓存巴拉巴拉</span><br><span class=\"hljs-keyword\">const</span> total = qualifiedIds.length;<br><span class=\"hljs-keyword\">const</span> maxListed = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">const</span> listed = <span class=\"hljs-built_in\">Math</span>.min(total, maxListed);<br><span class=\"hljs-keyword\">const</span> extra = <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">0</span>, total - maxListed);<br><span class=\"hljs-keyword\">const</span> depsString = chalk.yellow(<br>  qualifiedIds.slice(<span class=\"hljs-number\">0</span>, listed).join(<span class=\"hljs-string\">`\\n  `</span>) +<br>    (extra &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">`\\n  (...and <span class=\"hljs-subst\">$&#123;extra&#125;</span> more)`</span> : <span class=\"hljs-string\">``</span>),<br>);<br><span class=\"hljs-keyword\">if</span> (!asCommand) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!newDeps) &#123;<br>    <span class=\"hljs-comment\">// This is auto run on server start - let the user know that we are</span><br>    <span class=\"hljs-comment\">// pre-optimizing deps</span><br>    logger.info(<br>      chalk.greenBright(<span class=\"hljs-string\">`Pre-bundling dependencies:\\n  <span class=\"hljs-subst\">$&#123;depsString&#125;</span>`</span>),<br>    );<br>    logger.info(<br>      <span class=\"hljs-string\">`(this will be run only when your dependencies or config have changed)`</span>,<br>    );<br>  &#125;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  logger.info(chalk.greenBright(<span class=\"hljs-string\">`Optimizing dependencies:\\n  <span class=\"hljs-subst\">$&#123;depsString&#125;</span>`</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建预构建对象\"><a href=\"#创建预构建对象\" class=\"headerlink\" title=\"创建预构建对象\"></a>创建预构建对象</h3><p>使用 es-module-lexer 模块获取每个 deps 中的预构建模块文件，输出引入和导出的数据并保存。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123; ImportSpecifier, init, parse &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;es-module-lexer&#x27;</span>;<br><br><span class=\"hljs-comment\">// esbuild generates nested directory output with lowest common ancestor base</span><br><span class=\"hljs-comment\">// this is unpredictable and makes it difficult to analyze entry / output</span><br><span class=\"hljs-comment\">// mapping. So what we do here is:</span><br><span class=\"hljs-comment\">// 1. flatten all ids to eliminate slash</span><br><span class=\"hljs-comment\">// 2. in the plugin, read the entry ourselves as virtual files to retain the</span><br><span class=\"hljs-comment\">//    path.</span><br><span class=\"hljs-keyword\">const</span> flatIdDeps: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; = &#123;&#125;;<br><span class=\"hljs-keyword\">const</span> idToExports: Record&lt;<span class=\"hljs-built_in\">string</span>, ExportsData&gt; = &#123;&#125;;<br><span class=\"hljs-keyword\">const</span> flatIdToExports: Record&lt;<span class=\"hljs-built_in\">string</span>, ExportsData&gt; = &#123;&#125;;<br><span class=\"hljs-comment\">// 运行es-module-lexer的初始化函数，后续会用到</span><br><span class=\"hljs-keyword\">await</span> init;<br><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> id <span class=\"hljs-keyword\">in</span> deps) &#123;<br>  <span class=\"hljs-comment\">// 替换id中的斜杠变成下划线 node/abc =&gt; node_abc</span><br>  <span class=\"hljs-keyword\">const</span> flatId = flattenId(id);<br>  flatIdDeps[flatId] = deps[id];<br>  <span class=\"hljs-comment\">// 获取每个依赖源的文件内容</span><br>  <span class=\"hljs-comment\">//&#123; vue: &#x27;/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&#x27;,</span><br>  <span class=\"hljs-comment\">// &#x27;element-plus&#x27;: &#x27;/.../my-vue-app/node_modules/element-plus/lib/index.esm.js&#x27;,</span><br>  <span class=\"hljs-comment\">//  axios: &#x27;/.../my-vue-app/node_modules/axios/index.js&#x27; &#125;</span><br>  <span class=\"hljs-keyword\">const</span> entryContent = fs.readFileSync(deps[id], <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br>  <span class=\"hljs-comment\">// parse出自es-module-lexer，这个包是一个js模块语法词法分析器，体积非常小</span><br>  <span class=\"hljs-comment\">// 解析出后的ExportsData 是一个数组，[0]是imports, [1]是exports</span><br>  <span class=\"hljs-keyword\">const</span> exportsData = parse(entryContent) <span class=\"hljs-keyword\">as</span> ExportsData;<br><br>  <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    ss/se =&gt; statement start/end 缩写, &#123;number&#125; import的开始和结束index</span><br><span class=\"hljs-comment\">    这里以vue举例，parse返回的值 =&gt;  ss = 0 se = 60</span><br><span class=\"hljs-comment\">    entryContent.slice(0, 60) =&gt; &quot;import &#123; initCustomFormatter, warn &#125; from &#x27;@vue/runtime-dom&#x27;&quot;</span><br><span class=\"hljs-comment\">    entryContent.slice(62, 94) =&gt; &quot;export * from &#x27;@vue/runtime-dom&quot;</span><br><span class=\"hljs-comment\">    最后标注需要特殊处理的 export from</span><br><span class=\"hljs-comment\">  */</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> &#123; ss, se &#125; <span class=\"hljs-keyword\">of</span> exportsData[<span class=\"hljs-number\">0</span>]) &#123;<br>    <span class=\"hljs-keyword\">const</span> exp = entryContent.slice(ss, se);<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/export\\s+\\*\\s+from/</span>.test(exp)) &#123;<br>      exportsData.hasReExports = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//待定</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 分别记录以id flatId的exportsData</span><br>  <span class=\"hljs-comment\">// exportsData数据太多这里就不贴了，总之里面包含每个构建模块中的import和export的数据。</span><br>  idToExports[id] = exportsData;<br>  flatIdToExports[flatId] = exportsData;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上述描述代码中，我们理一下当前的逻辑。</p>\n<ol>\n<li><p>获取了预构建模块的内容（hash 值，优化对象等）。</p>\n</li>\n<li><p>获取包管理器的 lockfile 转换的 hash 值，判断是否需要重新运行预构建。</p>\n</li>\n<li><p>获取需要编译依赖关系的模块路径（deps）和需要编译但没找到来源的模块（missing)。</p>\n</li>\n<li><p>处理 missing 数组，打印 error 提示是否已安装来源。</p>\n</li>\n<li><p>获取 vite.config.js 中自定义强制预构建的模块路径(include)，加入 deps 对象中。</p>\n</li>\n<li><p>命令行打印需要构建模块的信息。</p>\n<p><img src=\"/images/pre-build.png\" alt=\"pre-build\"></p>\n</li>\n<li><p>创建预构建对象，获取预构建对象中的引入导出数据并记录。</p>\n</li>\n</ol>\n<p><strong>处理完各种琐事之后，我们获取了需要构建的 deps 对象，接下来进入下一章节来解析 deps 对象。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vite-依赖解析和预构建-源码分析-2-预构建对象和前期准备\"><a href=\"#Vite-依赖解析和预构建-源码分析-2-预构建对象和前期准备\" class=\"headerlink\" title=\"Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备\"></a>Vite 依赖解析和预构建 源码分析 - (2)预构建对象和前期准备</h1><h2 id=\"预构建对象和前期准备\"><a href=\"#预构建对象和前期准备\" class=\"headerlink\" title=\"预构建对象和前期准备\"></a>预构建对象和前期准备</h2><p>首先获取预缓存(metadata.json)的路径，以及预构建的 hash 值，以便后续比对。</p>\n<p>这个 json 文件为 vite 处理后导出的数据信息，当此文件存在时，会比对 hash 值，如果相同就会直接读取此文件中的依赖。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">optimizeDeps</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  config: ResolvedConfig,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  force = config.server.force,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  asCommand = <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  newDeps?: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; root, logger, cacheDir &#125; = config<br>   <span class=\"hljs-comment\">// 这边第三个args为 asCommand, 是否是命令行运行的</span><br>   <span class=\"hljs-comment\">// 为了讲述的流畅性，在上一章节代码入口没有提到， 在vite --force 后，会直接运行optimizeDeps函数，因此需要区分log的输出方式</span><br>   <span class=\"hljs-comment\">// vite --force    =&gt;    await optimizeDeps(config, options.force, true)</span><br>  <span class=\"hljs-keyword\">const</span> log = asCommand ? logger.info : debug<br><br>  <span class=\"hljs-keyword\">if</span> (!cacheDir) &#123;<br>    log(<span class=\"hljs-string\">`No cache directory. Skipping.`</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br><br>  <span class=\"hljs-comment\">//这边首先获取 预构建模块路径</span><br>  <span class=\"hljs-keyword\">const</span> dataPath = path.join(cacheDir, <span class=\"hljs-string\">&#x27;_metadata.json&#x27;</span>); <span class=\"hljs-comment\">//预缓存路径</span><br>  <span class=\"hljs-comment\">// /.../my-vue-app/node_modules/.vite/_metadata.json</span><br>  <span class=\"hljs-keyword\">const</span> mainHash = getDepHash(root, config);<br>  <span class=\"hljs-comment\">// 创建一个data的对象，后面会用到</span><br>  <span class=\"hljs-keyword\">const</span> data: DepOptimizationMetadata = &#123;<br>    <span class=\"hljs-attr\">hash</span>: mainHash,<br>    <span class=\"hljs-attr\">browserHash</span>: mainHash,<br>    <span class=\"hljs-attr\">optimized</span>: &#123;&#125;,<br>  &#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"如何获取-hash-值？\"><a href=\"#如何获取-hash-值？\" class=\"headerlink\" title=\"如何获取 hash 值？\"></a>如何获取 hash 值？</h3><p>首先获取了预构建模块的路径，默认情况为 node_modules/.vite。</p>\n<p>以下为 metadata.json 的数据结构, 后续会说到。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// node_modules/.vite/_metadata.json</span><br>&#123;<br>  <span class=\"hljs-attr\">&quot;hash&quot;</span>: <span class=\"hljs-string\">&quot;9a4fa980&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;browserHash&quot;</span>: <span class=\"hljs-string\">&quot;6f00d484&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;optimized&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;vue&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;file&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/.vite/vue.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;src&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;needsInterop&quot;</span>: <span class=\"hljs-literal\">false</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;axios&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;file&quot;</span>: <span class=\"hljs-string\">&quot;/.../new/my-vue-app/node_modules/.vite/axios.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;src&quot;</span>: <span class=\"hljs-string\">&quot;/.../new/my-vue-app/node_modules/axios/index.js&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;needsInterop&quot;</span>: <span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着我们看 getDepHash 函数。<br>官方文档中描述，Vite 在预构建之前，根据以下源来确定是否要重新运行预构建。</p>\n<ul>\n<li>package.json 中的 dependencies 列表</li>\n<li><strong>包管理器的 lockfile，例如 package-lock.json, yarn.lock，或者 pnpm-lock.yaml</strong></li>\n<li>可能在 vite.config.js 相关字段中配置过的</li>\n</ul>\n<p>以下代码中，变量 lockfileFormats 就是包管理器的 locakfile。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><span class=\"hljs-keyword\">const</span> lockfileFormats = [<span class=\"hljs-string\">&#x27;package-lock.json&#x27;</span>, <span class=\"hljs-string\">&#x27;yarn.lock&#x27;</span>, <span class=\"hljs-string\">&#x27;pnpm-lock.yaml&#x27;</span>];<br><br><span class=\"hljs-comment\">// /optimizer.ts =&gt; getDepHash</span><br><span class=\"hljs-keyword\">let</span> cachedHash: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDepHash</span>(<span class=\"hljs-params\">root: <span class=\"hljs-built_in\">string</span>, config: ResolvedConfig</span>): <span class=\"hljs-title\">string</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (cachedHash) &#123;<br>    <span class=\"hljs-keyword\">return</span> cachedHash;<br>  &#125;<br>  <span class=\"hljs-keyword\">let</span> content = lookupFile(root, lockfileFormats) || <span class=\"hljs-string\">&#x27;&#x27;</span>; <span class=\"hljs-comment\">//往下滑会有lookupFile函数的解释。</span><br>  <span class=\"hljs-comment\">// 这边已经获取了所有local file array 内的文件内容</span><br><br>  <span class=\"hljs-comment\">// also take config into account</span><br>  <span class=\"hljs-comment\">// only a subset of config options that can affect dep optimization</span><br><br>  content += <span class=\"hljs-built_in\">JSON</span>.stringify(<br>    &#123;<br>      <span class=\"hljs-attr\">mode</span>: config.mode,<br>      <span class=\"hljs-attr\">root</span>: config.root,<br>      <span class=\"hljs-attr\">resolve</span>: config.resolve,<br>      <span class=\"hljs-attr\">assetsInclude</span>: config.assetsInclude,<br>      <span class=\"hljs-attr\">plugins</span>: config.plugins.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> p.name),<br>      <span class=\"hljs-attr\">optimizeDeps</span>: &#123;<br>        <span class=\"hljs-attr\">include</span>: config.optimizeDeps?.include, <span class=\"hljs-comment\">// null</span><br>        <span class=\"hljs-attr\">exclude</span>: config.optimizeDeps?.exclude, <span class=\"hljs-comment\">//null</span><br>      &#125;,<br>    &#125;,<br>    <span class=\"hljs-function\">(<span class=\"hljs-params\">_, value</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">&#x27;function&#x27;</span> || value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">RegExp</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> value.toString();<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> value;<br>    &#125;,<br>  );<br>  <span class=\"hljs-comment\">//这里不说了  最终返回 &quot;9a4fa980&quot; 八位数hash值。</span><br>  <span class=\"hljs-keyword\">return</span> createHash(<span class=\"hljs-string\">&#x27;sha256&#x27;</span>).update(content).digest(<span class=\"hljs-string\">&#x27;hex&#x27;</span>).substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// /optimizer.ts =&gt; lookupFile</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lookupFile</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  dir: <span class=\"hljs-built_in\">string</span>,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  formats: <span class=\"hljs-built_in\">string</span>[],</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  pathOnly = <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>): <span class=\"hljs-title\">string</span> | <span class=\"hljs-title\">undefined</span> </span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> format <span class=\"hljs-keyword\">of</span> formats) &#123;<br>    <span class=\"hljs-keyword\">const</span> fullPath = path.join(dir, format); <span class=\"hljs-comment\">//获取root + format路径</span><br>    <span class=\"hljs-comment\">// 路径对象是否存在 并且是文件</span><br>    <span class=\"hljs-comment\">// pathOnly 为true就只返回路径，不然就都默认返回utf-8的文件内容</span><br>    <span class=\"hljs-keyword\">if</span> (fs.existsSync(fullPath) &amp;&amp; fs.statSync(fullPath).isFile()) &#123;<br>      <span class=\"hljs-keyword\">return</span> pathOnly ? fullPath : fs.readFileSync(fullPath, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> parentDir = path.dirname(dir);<br>  <span class=\"hljs-keyword\">if</span> (parentDir !== dir) &#123;<br>    <span class=\"hljs-keyword\">return</span> lookupFile(parentDir, formats, pathOnly);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"是否强制优化并处理-vite-文件夹\"><a href=\"#是否强制优化并处理-vite-文件夹\" class=\"headerlink\" title=\"是否强制优化并处理.vite 文件夹\"></a>是否强制优化并处理.vite 文件夹</h3><p>获取了预构建的 hash 值后，让我退回到 optimizeDeps 函数中，继续往下看。</p>\n<p>通过参数 force 来判断是否需要强制优化，如果不需要那就对比老 hash 值，如果相等就返回老的 metadata.json 文件内容。</p>\n<p>最后处理.vite 文件夹，为后续做准备。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br>...<br><span class=\"hljs-keyword\">const</span> data: DepOptimizationMetadata = &#123;<br>    <span class=\"hljs-attr\">hash</span>: mainHash, <span class=\"hljs-comment\">//&quot;9a4fa980&quot;</span><br>    <span class=\"hljs-attr\">browserHash</span>: mainHash, <span class=\"hljs-comment\">//&quot;9a4fa980&quot;</span><br>    <span class=\"hljs-attr\">optimized</span>: &#123;&#125;,<br>  &#125;;<br><br><br><span class=\"hljs-comment\">// 是否强制预先优化 不管是否已经更改。</span><br><span class=\"hljs-comment\">// force = config.server.force 来源于cli.ts，获取命令行参数中是否有 --force</span><br><span class=\"hljs-keyword\">if</span> (!force) &#123;<br>  <span class=\"hljs-keyword\">let</span> prevData;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-comment\">// 尝试解析已经存在的metadata数据， 获取/.vite/metadata.json中的内容</span><br>    prevData = <span class=\"hljs-built_in\">JSON</span>.parse(fs.readFileSync(dataPath, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>));<br>  &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;&#125;<br>  <span class=\"hljs-comment\">// hash is consistent, no need to re-bundle</span><br>  <span class=\"hljs-comment\">// 如果预dep数据的hash相同，那就直接跳过，如果需要覆盖就使用 --force</span><br>  <span class=\"hljs-keyword\">if</span> (prevData &amp;&amp; prevData.hash === data.hash) &#123;<br>    log(<span class=\"hljs-string\">&#x27;Hash is consistent. Skipping. Use --force to override.&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> prevData;<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">//如果 node_modules/.vite 存在，那就清空。</span><br><span class=\"hljs-keyword\">if</span> (fs.existsSync(cacheDir)) &#123;<br>  emptyDir(cacheDir);<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-comment\">// 要不然就创建文件夹， 并且recursive：true 返回创建文件夹的路径</span><br>  fs.mkdirSync(cacheDir, &#123; <span class=\"hljs-attr\">recursive</span>: <span class=\"hljs-literal\">true</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取需要编译依赖关系的模块路径\"><a href=\"#获取需要编译依赖关系的模块路径\" class=\"headerlink\" title=\"获取需要编译依赖关系的模块路径\"></a>获取需要编译依赖关系的模块路径</h3><p>解决.vite 文件夹后，我们跟着代码处理.vite 中的内容文件。</p>\n<p>这边创建了两个变量 deps 和 missing。</p>\n<p>deps: 需要处理依赖关系的路径对象。</p>\n<p>missing: 需要处理依赖关系但在 node_modules 中没有找到来源的数组对象。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">//deps</span><br>&#123;<br>  <span class=\"hljs-attr\">&quot;vue&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;axios&quot;</span>: <span class=\"hljs-string\">&quot;/.../my-vue-app/node_modules/axios/index.js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>需要提前知道的是，newDeps 这个 args 参数区分了第一次编译和已启动后遇到新依赖关系导入重写运行的编译。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-keyword\">let</span> deps: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;, missing: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;;<br><span class=\"hljs-comment\">// 在服务器已经启动之后，如果遇到一个新的依赖关系导入，</span><br><span class=\"hljs-comment\">// 而这个依赖关系还没有在缓存中，Vite 将重新运行依赖构建进程并重新加载页面。</span><br><span class=\"hljs-comment\">// 如上官方文档所述，最终会得出deps 和missing</span><br><span class=\"hljs-keyword\">if</span> (!newDeps) &#123;<br>  <span class=\"hljs-comment\">// scanImports 这里就不展开了，他的作用就是获取导入源，用正则检测后，使用esbuild编译所有的入口依赖（entries)</span><br>  (&#123; deps, missing &#125; = <span class=\"hljs-keyword\">await</span> scanImports(config));<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  deps = newDeps;<br>  missing = &#123;&#125;;<br>&#125;<br><span class=\"hljs-comment\">// 重写更新了浏览器的哈希</span><br><span class=\"hljs-comment\">// update browser hash</span><br>data.browserHash = createHash(<span class=\"hljs-string\">&#x27;sha256&#x27;</span>)<br>  .update(data.hash + <span class=\"hljs-built_in\">JSON</span>.stringify(deps))<br>  .digest(<span class=\"hljs-string\">&#x27;hex&#x27;</span>)<br>  .substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"没有找到来源的模块处理-missing\"><a href=\"#没有找到来源的模块处理-missing\" class=\"headerlink\" title=\"没有找到来源的模块处理(missing)\"></a>没有找到来源的模块处理(missing)</h3><p>下面代码很简单，处理在 node_modules 中没有找到来源的模块。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-comment\">// missing是一个储存需要处理依赖关系但在 node_modules 中没有找到来源的数组对象，如果有的话直接error提醒一波。</span><br><span class=\"hljs-keyword\">const</span> missingIds = <span class=\"hljs-built_in\">Object</span>.keys(missing);<br><span class=\"hljs-keyword\">if</span> (missingIds.length) &#123;<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<br>    <span class=\"hljs-string\">`The following dependencies are imported but could not be resolved:\\n\\n  <span class=\"hljs-subst\">$&#123;missingIds</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">      .map(</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">        (id) =&gt;</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">          <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;chalk.cyan(id)&#125;</span> <span class=\"hljs-subst\">$&#123;chalk.white.dim(</span></span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">            <span class=\"hljs-string\">`(imported by <span class=\"hljs-subst\">$&#123;missing[id]&#125;</span>)`</span>,</span></span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">          )&#125;</span>`</span>,</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">      )</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">      .join(<span class=\"hljs-string\">`\\n  `</span>)&#125;</span>\\n\\nAre they installed?`</span>,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取并导入-自定义的强制预构建-include\"><a href=\"#获取并导入-自定义的强制预构建-include\" class=\"headerlink\" title=\"获取并导入 自定义的强制预构建(include)\"></a>获取并导入 自定义的强制预构建(include)</h3><p>接着处理在 vite.config.js 中 optimizeDeps.include。</p>\n<p>如官方文档 API 所述，</p>\n<p>optimizeDeps.include: 默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-comment\">//config中是否有需要强制构建的依赖项, 处理后再deps中加入</span><br><span class=\"hljs-keyword\">const</span> include = config.optimizeDeps?.include;<br><span class=\"hljs-keyword\">if</span> (include) &#123;<br>  <span class=\"hljs-keyword\">const</span> resolve = config.createResolver(&#123; <span class=\"hljs-attr\">asSrc</span>: <span class=\"hljs-literal\">false</span> &#125;);<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> id <span class=\"hljs-keyword\">of</span> include) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!deps[id]) &#123;<br>      <span class=\"hljs-keyword\">const</span> entry = <span class=\"hljs-keyword\">await</span> resolve(id);<br>      <span class=\"hljs-keyword\">if</span> (entry) &#123;<br>        deps[id] = entry;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<br>          <span class=\"hljs-string\">`Failed to resolve force included dependency: <span class=\"hljs-subst\">$&#123;chalk.cyan(id)&#125;</span>`</span>,<br>        );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"命令行打印需要构建模块的信息\"><a href=\"#命令行打印需要构建模块的信息\" class=\"headerlink\" title=\"命令行打印需要构建模块的信息\"></a>命令行打印需要构建模块的信息</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-keyword\">const</span> qualifiedIds = <span class=\"hljs-built_in\">Object</span>.keys(deps);<br><span class=\"hljs-comment\">//不用说很简单，没有需要依赖的dep就跳过</span><br><span class=\"hljs-keyword\">if</span> (!qualifiedIds.length) &#123;<br>  writeFile(dataPath, <span class=\"hljs-built_in\">JSON</span>.stringify(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  log(<span class=\"hljs-string\">`No dependencies to bundle. Skipping.\\n\\n\\n`</span>);<br>  <span class=\"hljs-keyword\">return</span> data;<br>&#125;<br><br><span class=\"hljs-comment\">// 这里也不用解释太多，基本上就是打印出信息的逻辑，然后绿色高亮告诉你要预缓存巴拉巴拉</span><br><span class=\"hljs-keyword\">const</span> total = qualifiedIds.length;<br><span class=\"hljs-keyword\">const</span> maxListed = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">const</span> listed = <span class=\"hljs-built_in\">Math</span>.min(total, maxListed);<br><span class=\"hljs-keyword\">const</span> extra = <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">0</span>, total - maxListed);<br><span class=\"hljs-keyword\">const</span> depsString = chalk.yellow(<br>  qualifiedIds.slice(<span class=\"hljs-number\">0</span>, listed).join(<span class=\"hljs-string\">`\\n  `</span>) +<br>    (extra &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">`\\n  (...and <span class=\"hljs-subst\">$&#123;extra&#125;</span> more)`</span> : <span class=\"hljs-string\">``</span>),<br>);<br><span class=\"hljs-keyword\">if</span> (!asCommand) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!newDeps) &#123;<br>    <span class=\"hljs-comment\">// This is auto run on server start - let the user know that we are</span><br>    <span class=\"hljs-comment\">// pre-optimizing deps</span><br>    logger.info(<br>      chalk.greenBright(<span class=\"hljs-string\">`Pre-bundling dependencies:\\n  <span class=\"hljs-subst\">$&#123;depsString&#125;</span>`</span>),<br>    );<br>    logger.info(<br>      <span class=\"hljs-string\">`(this will be run only when your dependencies or config have changed)`</span>,<br>    );<br>  &#125;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  logger.info(chalk.greenBright(<span class=\"hljs-string\">`Optimizing dependencies:\\n  <span class=\"hljs-subst\">$&#123;depsString&#125;</span>`</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建预构建对象\"><a href=\"#创建预构建对象\" class=\"headerlink\" title=\"创建预构建对象\"></a>创建预构建对象</h3><p>使用 es-module-lexer 模块获取每个 deps 中的预构建模块文件，输出引入和导出的数据并保存。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123; ImportSpecifier, init, parse &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;es-module-lexer&#x27;</span>;<br><br><span class=\"hljs-comment\">// esbuild generates nested directory output with lowest common ancestor base</span><br><span class=\"hljs-comment\">// this is unpredictable and makes it difficult to analyze entry / output</span><br><span class=\"hljs-comment\">// mapping. So what we do here is:</span><br><span class=\"hljs-comment\">// 1. flatten all ids to eliminate slash</span><br><span class=\"hljs-comment\">// 2. in the plugin, read the entry ourselves as virtual files to retain the</span><br><span class=\"hljs-comment\">//    path.</span><br><span class=\"hljs-keyword\">const</span> flatIdDeps: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; = &#123;&#125;;<br><span class=\"hljs-keyword\">const</span> idToExports: Record&lt;<span class=\"hljs-built_in\">string</span>, ExportsData&gt; = &#123;&#125;;<br><span class=\"hljs-keyword\">const</span> flatIdToExports: Record&lt;<span class=\"hljs-built_in\">string</span>, ExportsData&gt; = &#123;&#125;;<br><span class=\"hljs-comment\">// 运行es-module-lexer的初始化函数，后续会用到</span><br><span class=\"hljs-keyword\">await</span> init;<br><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> id <span class=\"hljs-keyword\">in</span> deps) &#123;<br>  <span class=\"hljs-comment\">// 替换id中的斜杠变成下划线 node/abc =&gt; node_abc</span><br>  <span class=\"hljs-keyword\">const</span> flatId = flattenId(id);<br>  flatIdDeps[flatId] = deps[id];<br>  <span class=\"hljs-comment\">// 获取每个依赖源的文件内容</span><br>  <span class=\"hljs-comment\">//&#123; vue: &#x27;/.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&#x27;,</span><br>  <span class=\"hljs-comment\">// &#x27;element-plus&#x27;: &#x27;/.../my-vue-app/node_modules/element-plus/lib/index.esm.js&#x27;,</span><br>  <span class=\"hljs-comment\">//  axios: &#x27;/.../my-vue-app/node_modules/axios/index.js&#x27; &#125;</span><br>  <span class=\"hljs-keyword\">const</span> entryContent = fs.readFileSync(deps[id], <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br>  <span class=\"hljs-comment\">// parse出自es-module-lexer，这个包是一个js模块语法词法分析器，体积非常小</span><br>  <span class=\"hljs-comment\">// 解析出后的ExportsData 是一个数组，[0]是imports, [1]是exports</span><br>  <span class=\"hljs-keyword\">const</span> exportsData = parse(entryContent) <span class=\"hljs-keyword\">as</span> ExportsData;<br><br>  <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    ss/se =&gt; statement start/end 缩写, &#123;number&#125; import的开始和结束index</span><br><span class=\"hljs-comment\">    这里以vue举例，parse返回的值 =&gt;  ss = 0 se = 60</span><br><span class=\"hljs-comment\">    entryContent.slice(0, 60) =&gt; &quot;import &#123; initCustomFormatter, warn &#125; from &#x27;@vue/runtime-dom&#x27;&quot;</span><br><span class=\"hljs-comment\">    entryContent.slice(62, 94) =&gt; &quot;export * from &#x27;@vue/runtime-dom&quot;</span><br><span class=\"hljs-comment\">    最后标注需要特殊处理的 export from</span><br><span class=\"hljs-comment\">  */</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> &#123; ss, se &#125; <span class=\"hljs-keyword\">of</span> exportsData[<span class=\"hljs-number\">0</span>]) &#123;<br>    <span class=\"hljs-keyword\">const</span> exp = entryContent.slice(ss, se);<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/export\\s+\\*\\s+from/</span>.test(exp)) &#123;<br>      exportsData.hasReExports = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//待定</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 分别记录以id flatId的exportsData</span><br>  <span class=\"hljs-comment\">// exportsData数据太多这里就不贴了，总之里面包含每个构建模块中的import和export的数据。</span><br>  idToExports[id] = exportsData;<br>  flatIdToExports[flatId] = exportsData;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上述描述代码中，我们理一下当前的逻辑。</p>\n<ol>\n<li><p>获取了预构建模块的内容（hash 值，优化对象等）。</p>\n</li>\n<li><p>获取包管理器的 lockfile 转换的 hash 值，判断是否需要重新运行预构建。</p>\n</li>\n<li><p>获取需要编译依赖关系的模块路径（deps）和需要编译但没找到来源的模块（missing)。</p>\n</li>\n<li><p>处理 missing 数组，打印 error 提示是否已安装来源。</p>\n</li>\n<li><p>获取 vite.config.js 中自定义强制预构建的模块路径(include)，加入 deps 对象中。</p>\n</li>\n<li><p>命令行打印需要构建模块的信息。</p>\n<p><img src=\"/images/pre-build.png\" alt=\"pre-build\"></p>\n</li>\n<li><p>创建预构建对象，获取预构建对象中的引入导出数据并记录。</p>\n</li>\n</ol>\n<p><strong>处理完各种琐事之后，我们获取了需要构建的 deps 对象，接下来进入下一章节来解析 deps 对象。</strong></p>\n"},{"title":"Vite 依赖解析和预构建 源码分析 - (3)构建和插件","date":"2021-07-14T03:49:57.000Z","index_img":"/img/article/vite.png","_content":"\n# Vite 依赖解析和预构建 源码分析 - (3)构建和插件\n\n### 构建(build)\n\n需要注意的几个参数：\n\n1. `format`设为`esm`，是 Vite 的目的之一，将所有的代码视为原生 ES 模块。\n\n   > CommonJS 和 UMD 兼容性: 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。\n\n2. `splitting`设为`true`，仅适用于 esm 输出下，拆分多个文件引入的模块至单独文件，浏览页面 a 时，加载了 axios，再进入页面 b 时，直接调用已经加载后的 axios，省去了再次请求 axios 的操作。\n\n   > Code shared between multiple entry points is split off into a separate shared file that both entry points import. That way if the user first browses to one page and then to another page, they don't have to download all of the JavaScript for the second page from scratch if the shared part has already been downloaded and cached by their browser.\n\n   > Code referenced through an asynchronous import() expression will be split off into a separate file and only loaded when that expression is evaluated. This allows you to improve the initial download time of your app by only downloading the code you need at startup, and then lazily downloading additional code if needed later.\n\n3. `plugins`含有 Vite 插件`esbuildDepPlugin`: 下面会详细解释此插件。\n\n4. `treeShaking`设为`ignore-annotations`, 文档中提到的忽略无用的代码，以便减轻模块的体积。\n\n```typescript\n// /optimizer/index.ts\n\n// 最核心的地方，使用esBuild打包了\nconst result = await build({\n  entryPoints: Object.keys(flatIdDeps),\n  bundle: true, //任何导入的依赖一起打包\n  format: 'esm', // 符合vite 转换成esm\n  external: config.optimizeDeps?.exclude, //不需要处理的模块\n  logLevel: 'error', //日志级别，只显示错误\n  //拆分代码，简单来说就是拆分入口内的共享import文件，在访问a页面时加载了axios，\n  //进入了b页面直接使用a页面加载的axios省去了再次请求的过程。\n  splitting: true,\n  sourcemap: true, //这个不用多说哈\n  outdir: cacheDir, //vite自定义的默认缓存文件夹， node_modules/.vite\n  //修剪树枝？ 默认删除无用的代码，ignore-annotations的话指忽略那些删掉会损坏包的无用代码\n  treeShaking: 'ignore-annotations',\n  metafile: true, // 生成meta json\n  define, // 替换标识符\n  plugins: [...plugins, esbuildDepPlugin(flatIdDeps, flatIdToExports, config)],\n  ...esbuildOptions,\n});\n```\n\n### esbuild 插件\n\n了解 esbuild 的插件的可以直接跳过这节，此节简单解释了下插件的结构:\n\n(1) esbuild plugin 是一个包含`name`和`setup`的对象结构。 `name`为插件名,`setup`是一个接收`build`的函数。\n\n(2) 主要的逻辑在`setup`函数中，分别为`build.onResolve`和 `build.onLoad`。\n\n`build.onResolve`: 此函数拦截相应的导入路径，修改路径并标记特定的命名空间。\n\n`build.onLoad`: 此函数接收并筛选所有标记命名空间为`env-ns`的传入项,告诉 esbuild 该如何处理。\n\n```typescript\nlet envPlugin = {\n  name: 'env',\n  setup(build) {\n    // 第一个参数为拦截规则。如下示例，用正则拦截了名为`env`的路径。\n    // 第二个参数为函数，返回对象中包含路径（这里可以对路径修改并返回）和标记`env-ns`命名空间。\n    build.onResolve({ filter: /^env$/ }, (args) => ({\n      path: args.path,\n      namespace: 'env-ns',\n    }));\n\n    // 第一个参数为接收命名空间为env-ns的路径并通过filter筛选。\n    // 第二个参数为函数，告诉esbuild在env-ns命名空间中要返回json格式的环境变量。\n    build.onLoad({ filter: /.*/, namespace: 'env-ns' }, () => ({\n      contents: JSON.stringify(process.env),\n      loader: 'json',\n    }));\n  },\n};\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.js'],\n    bundle: true,\n    outfile: 'out.js',\n    plugins: [envPlugin],\n  })\n  .catch(() => process.exit(1));\n```\n\n### esbuildDepPlugin\n\n首先需要看下 Vite 插件的一些用到的函数：\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\nexport function esbuildDepPlugin(\n  qualified: Record<string, string>,\n  exportsData: Record<string, ExportsData>,\n  config: ResolvedConfig,\n): Plugin;\n```\n\n#### (1) 创建了两个解析器，分别对应 `esm` 和 `commonjs`。\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\n// default resolver which prefers ESM\nconst _resolve = config.createResolver({ asSrc: false });\n\n// cjs resolver that prefers Node\nconst _resolveRequire = config.createResolver({\n  asSrc: false,\n  isRequire: true,\n});\n```\n\n#### (2) 创建 `resolve` 函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\nconst resolve = (\n  id: string,\n  importer: string,\n  kind: ImportKind,\n  resolveDir?: string,\n): Promise<string | undefined> => {\n  let _importer;\n  // explicit resolveDir - this is passed only during yarn pnp resolve for\n  // entries\n  // 传如果传入文件夹，那就获取绝对路径的文件夹路径\n  if (resolveDir) {\n    _importer = normalizePath(path.join(resolveDir, '*'));\n  } else {\n    // map importer ids to file paths for correct resolution\n    /**\n     * mporter是否在外部传入的flatIdDeps中，\n     * {\n     *  vue: '/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js',\n     *  axios: '/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/axios/index.js'\n     * }\n     * 如果在获取value的路径\n     */\n    _importer = importer in qualified ? qualified[importer] : importer;\n  }\n  //判断是否时以require开头，为了筛选出 kind为require-resolve, require-call的模块，调用resolveRequire\n  const resolver = kind.startsWith('require') ? _resolveRequire : _resolve;\n  // 返回解决完的路径,这个函数的代码后续会有章节详细讲\n  return resolver(id, _importer);\n};\n```\n\n#### (3) 创建`resolveEntry`函数，根据传入类型返回命名空间。\n\n```typescript\nfunction resolveEntry(id: string, isEntry: boolean, resolveDir: string) {\n  const flatId = flattenId(id);\n  if (flatId in qualified) {\n    return isEntry\n      ? {\n          path: flatId,\n          namespace: 'dep',\n        }\n      : {\n          path: require.resolve(qualified[flatId], {\n            paths: [resolveDir],\n          }),\n        };\n  }\n}\n```\n\n#### (4) Vite 的`onResolve`\n\nVite 创建了两个`onResolve`， 一个处理 js 文件，一个处理非 js 类型的文件。\n\n处理非 js：\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\n// 这个onResolve为处理非js类型的文件\n\n// 非js类型的文件数组\nconst externalTypes = [\n  'css',\n  'less',\n  'sass',\n  ...\n];\nbuild.onResolve(\n  {\n    // 这边通过正则匹配出在externalTypes数组内\b格式的文件\n    filter: new RegExp(`\\\\.(` + externalTypes.join('|') + `)(\\\\?.*)?$`),\n  },\n  async ({ path: id, importer, kind }) => {\n    // importer {string} 要打包的导入模块路径\n    // kind {string} 导入规则 | 'entry-point'| 'import-statement'| 'require-call'| 'dynamic-import'| 'require-resolve'| 'import-rule'| 'url-token'\n    const resolved = await resolve(id, importer, kind);\n    if (resolved) {\n      // 返回标记特殊处理，并返回引入文件的路径\n      return {\n        path: resolved,\n        external: true,\n      };\n    }\n  },\n);\n```\n\n处理 js 类型的文件:\n\n以下代码就是 Vite 最刺激的地方，我应该会新建一篇章节来解释这块代码。\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\n// 这个onResolve为处理js类型的文件\n\nbuild.onResolve(\n  { filter: /^[\\w@][^:]/ },\n  async ({ path: id, importer, kind, resolveDir }) => {\n    /**\n      id:  vue\n      importer:\n      kind:  entry-point\n\n      id:  @vue/runtime-dom\n      importer:  /Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\n      kind:  import-statement\n\n      参数如上，vite把预打包的模块分为 入口模块和依赖模块，\n      像axios vue之类的 我们在项目中import的模块，\n      runtime-dom 这种模块则是在package-lock.json, 是项目中入口模块的依赖模块，\n      然后经过以下代码来区分并处理。\n    */\n    const isEntry = !importer;\n    // ensure esbuild uses our resolved entries\n    let entry;\n    // if this is an entry, return entry namespace resolve result\n    // 如果他是入口，就返回名为dep的命名空间来做接下来操作\n    if ((entry = resolveEntry(id, isEntry, resolveDir))) return entry;\n\n    // check if this is aliased to an entry - also return entry namespace\n    const aliased = await _resolve(id, undefined, true);\n    if (aliased && (entry = resolveEntry(aliased, isEntry, resolveDir))) {\n      return entry;\n    }\n\n    // use vite's own resolver\n    // ok这里开始处理依赖模块的流程，这边resolve\n    const resolved = await resolve(id, importer, kind);\n    if (resolved) {\n      // vite自定义的id const browserExternalId = '__vite-browser-external'\n      // 返回命名空间和id，因为浏览器兼容问题，无法处理的忽略模块\n      if (resolved.startsWith(browserExternalId)) {\n        //返回给browser-external命名空间处理并返回id\n        return {\n          path: id,\n          namespace: 'browser-external',\n        };\n      }\n      // 是否是非js或者外部文件，和上一个onResolve一样返回处理\n      if (isExternalUrl(resolved)) {\n        return {\n          path: resolved,\n          external: true,\n        };\n      }\n      return {\n        path: path.resolve(resolved),\n      };\n    }\n  },\n);\n```\n\n#### (5) Vite 的`onLoad`\n\n`dep`命名空间处理,下面代码有点复杂，简单说下逻辑。\n\n第一步，获取每个入口模块的引入路径，例如`axios`的`entryFile`为`/.../my-vue-app/node_modules/axios/index.js`,\n\n转换成路径`relativePath`并添加前缀`node_modules/axios/index.js`。\n\n第二步，根据`exportsData`（之前 parse 后返回出的引入和导出的数据）来判断`commonjs、default、export from`类型，\n\n最后转换成`contents` => `export default require(\"./node_modules/axios/index.js\")`。\n\n第三步，根据入口模块的路径获取后缀`ext`。\n\n最后返回对象。\n\n```typescript\n/**\n * loader {string} 告诉esbuild要解析成js/css/....\n * resolveDir {string} 模块导入路径\n * contents: {string} 加载内容\n */\nreturn {\n  loader: ext as Loader,\n  contents,\n  resolveDir: root,\n};\n```\n\n```typescript\n// 获取项目的路径\nconst root = path.resolve(config.root);\nbuild.onLoad({ filter: /.*/, namespace: 'dep' }, ({ path: id }) => {\n  // 入口文件 vue => /.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\n  const entryFile = qualified[id];\n  // 获取原始路径\n  let relativePath = normalizePath(path.relative(root, entryFile));\n  // 这边来处理 .abc.js => ./abc.js\n  if (!relativePath.startsWith('.')) {\n    relativePath = `./${relativePath}`;\n  }\n\n  let contents = '';\n  const data = exportsData[id];\n  const [imports, exports] = data;\n  // 下面都是处理不同模块的流程\n  if (!imports.length && !exports.length) {\n    // cjs\n    // export default require(\"./node_modules/axios/index.js\");\n    contents += `export default require(\"${relativePath}\");`;\n  } else {\n    if (exports.includes('default')) {\n      // default\n      // import d from \"./node_modules/element-plus/lib/index.esm.js\";export default d;\n      contents += `import d from \"${relativePath}\";export default d;`;\n    }\n    if (data.hasReExports || exports.length > 1 || exports[0] !== 'default') {\n      // hasReExports\n      // export * from \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\"\n      contents += `\\nexport * from \"${relativePath}\"`;\n    }\n  }\n  // 获取入口文件的后缀\n  let ext = path.extname(entryFile).slice(1);\n  if (ext === 'mjs') ext = 'js';\n  /**\n   * loader {string} 告诉esbuild要解析成js/css/....\n   * resolveDir {string} 模块导入路径\n   * contents: {string} 加载内容\n   *\n   * 以下是一个处理vue runtime-dom的例子\n   * {\n   *  ext: 'js',\n   *  contents: \"export * from \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\",\n   *  resolveDir: '..../node_modules/vue/dist'\n   * }\n   */\n  return {\n    loader: ext as Loader,\n    contents,\n    resolveDir: root,\n  };\n});\n```\n\n### 总结\n\n1. 上一章节[预构建对象和前期准备](/docs/rebuild/optimizer)中获取`deps`对象后，调用`esbuild`的打包功能。\n\n2. 传入`Vite`自定义的插件中，以文件类型分类。\n\n3. \b 告诉 esbuild 分为入口模块和依赖模块并处理，最终打包文件写入至`/node_modules/.vite`文件夹中。\n\n### 最后\n\nVite 项目(Vue)中的`axios`编译走向如下：\n\n#### 1. Vue 项目组件中引入`axios`\n\n![pre-build](/images/build/1.png)\n\n#### 2. .vite 文件中的`axios.js`文件，已经编译成上一节中`contents`的路径了。\n\n![pre-build](/images/build/3.png)\n\n### 最后的最后\n\n所有依赖模块构建完毕后写入`/node_modules/.vite`文件中，如若依赖项新增或改变，则会重写构建`.vite`。每次启动项目时，如果有预构建文件，可以直接启动，不需要每次重写打包依赖项。\n\n`ECMA Script Modules(esm)`, 虽然 2021 年了，很多前端都已经在用最新的技术和代码来做项目，但是还有很多很多很多非常好用的模块都是好几年前创建的，那些模块导出机制五花八门，由`Vite`统一转换成 esm 的方式，只提供源码，让浏览器接管了打包这一服务。当页面需要某个模块时，Vite 只要转换并返回 esm 方式的源码就行了。\n","source":"_posts/vite-3.md","raw":"---\ntitle: Vite 依赖解析和预构建 源码分析 - (3)构建和插件\ndate: 2021-07-14 11:49:57\ntags: [工程化, Vite]\nindex_img: /img/article/vite.png\n---\n\n# Vite 依赖解析和预构建 源码分析 - (3)构建和插件\n\n### 构建(build)\n\n需要注意的几个参数：\n\n1. `format`设为`esm`，是 Vite 的目的之一，将所有的代码视为原生 ES 模块。\n\n   > CommonJS 和 UMD 兼容性: 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。\n\n2. `splitting`设为`true`，仅适用于 esm 输出下，拆分多个文件引入的模块至单独文件，浏览页面 a 时，加载了 axios，再进入页面 b 时，直接调用已经加载后的 axios，省去了再次请求 axios 的操作。\n\n   > Code shared between multiple entry points is split off into a separate shared file that both entry points import. That way if the user first browses to one page and then to another page, they don't have to download all of the JavaScript for the second page from scratch if the shared part has already been downloaded and cached by their browser.\n\n   > Code referenced through an asynchronous import() expression will be split off into a separate file and only loaded when that expression is evaluated. This allows you to improve the initial download time of your app by only downloading the code you need at startup, and then lazily downloading additional code if needed later.\n\n3. `plugins`含有 Vite 插件`esbuildDepPlugin`: 下面会详细解释此插件。\n\n4. `treeShaking`设为`ignore-annotations`, 文档中提到的忽略无用的代码，以便减轻模块的体积。\n\n```typescript\n// /optimizer/index.ts\n\n// 最核心的地方，使用esBuild打包了\nconst result = await build({\n  entryPoints: Object.keys(flatIdDeps),\n  bundle: true, //任何导入的依赖一起打包\n  format: 'esm', // 符合vite 转换成esm\n  external: config.optimizeDeps?.exclude, //不需要处理的模块\n  logLevel: 'error', //日志级别，只显示错误\n  //拆分代码，简单来说就是拆分入口内的共享import文件，在访问a页面时加载了axios，\n  //进入了b页面直接使用a页面加载的axios省去了再次请求的过程。\n  splitting: true,\n  sourcemap: true, //这个不用多说哈\n  outdir: cacheDir, //vite自定义的默认缓存文件夹， node_modules/.vite\n  //修剪树枝？ 默认删除无用的代码，ignore-annotations的话指忽略那些删掉会损坏包的无用代码\n  treeShaking: 'ignore-annotations',\n  metafile: true, // 生成meta json\n  define, // 替换标识符\n  plugins: [...plugins, esbuildDepPlugin(flatIdDeps, flatIdToExports, config)],\n  ...esbuildOptions,\n});\n```\n\n### esbuild 插件\n\n了解 esbuild 的插件的可以直接跳过这节，此节简单解释了下插件的结构:\n\n(1) esbuild plugin 是一个包含`name`和`setup`的对象结构。 `name`为插件名,`setup`是一个接收`build`的函数。\n\n(2) 主要的逻辑在`setup`函数中，分别为`build.onResolve`和 `build.onLoad`。\n\n`build.onResolve`: 此函数拦截相应的导入路径，修改路径并标记特定的命名空间。\n\n`build.onLoad`: 此函数接收并筛选所有标记命名空间为`env-ns`的传入项,告诉 esbuild 该如何处理。\n\n```typescript\nlet envPlugin = {\n  name: 'env',\n  setup(build) {\n    // 第一个参数为拦截规则。如下示例，用正则拦截了名为`env`的路径。\n    // 第二个参数为函数，返回对象中包含路径（这里可以对路径修改并返回）和标记`env-ns`命名空间。\n    build.onResolve({ filter: /^env$/ }, (args) => ({\n      path: args.path,\n      namespace: 'env-ns',\n    }));\n\n    // 第一个参数为接收命名空间为env-ns的路径并通过filter筛选。\n    // 第二个参数为函数，告诉esbuild在env-ns命名空间中要返回json格式的环境变量。\n    build.onLoad({ filter: /.*/, namespace: 'env-ns' }, () => ({\n      contents: JSON.stringify(process.env),\n      loader: 'json',\n    }));\n  },\n};\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.js'],\n    bundle: true,\n    outfile: 'out.js',\n    plugins: [envPlugin],\n  })\n  .catch(() => process.exit(1));\n```\n\n### esbuildDepPlugin\n\n首先需要看下 Vite 插件的一些用到的函数：\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\nexport function esbuildDepPlugin(\n  qualified: Record<string, string>,\n  exportsData: Record<string, ExportsData>,\n  config: ResolvedConfig,\n): Plugin;\n```\n\n#### (1) 创建了两个解析器，分别对应 `esm` 和 `commonjs`。\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\n// default resolver which prefers ESM\nconst _resolve = config.createResolver({ asSrc: false });\n\n// cjs resolver that prefers Node\nconst _resolveRequire = config.createResolver({\n  asSrc: false,\n  isRequire: true,\n});\n```\n\n#### (2) 创建 `resolve` 函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\nconst resolve = (\n  id: string,\n  importer: string,\n  kind: ImportKind,\n  resolveDir?: string,\n): Promise<string | undefined> => {\n  let _importer;\n  // explicit resolveDir - this is passed only during yarn pnp resolve for\n  // entries\n  // 传如果传入文件夹，那就获取绝对路径的文件夹路径\n  if (resolveDir) {\n    _importer = normalizePath(path.join(resolveDir, '*'));\n  } else {\n    // map importer ids to file paths for correct resolution\n    /**\n     * mporter是否在外部传入的flatIdDeps中，\n     * {\n     *  vue: '/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js',\n     *  axios: '/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/axios/index.js'\n     * }\n     * 如果在获取value的路径\n     */\n    _importer = importer in qualified ? qualified[importer] : importer;\n  }\n  //判断是否时以require开头，为了筛选出 kind为require-resolve, require-call的模块，调用resolveRequire\n  const resolver = kind.startsWith('require') ? _resolveRequire : _resolve;\n  // 返回解决完的路径,这个函数的代码后续会有章节详细讲\n  return resolver(id, _importer);\n};\n```\n\n#### (3) 创建`resolveEntry`函数，根据传入类型返回命名空间。\n\n```typescript\nfunction resolveEntry(id: string, isEntry: boolean, resolveDir: string) {\n  const flatId = flattenId(id);\n  if (flatId in qualified) {\n    return isEntry\n      ? {\n          path: flatId,\n          namespace: 'dep',\n        }\n      : {\n          path: require.resolve(qualified[flatId], {\n            paths: [resolveDir],\n          }),\n        };\n  }\n}\n```\n\n#### (4) Vite 的`onResolve`\n\nVite 创建了两个`onResolve`， 一个处理 js 文件，一个处理非 js 类型的文件。\n\n处理非 js：\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\n// 这个onResolve为处理非js类型的文件\n\n// 非js类型的文件数组\nconst externalTypes = [\n  'css',\n  'less',\n  'sass',\n  ...\n];\nbuild.onResolve(\n  {\n    // 这边通过正则匹配出在externalTypes数组内\b格式的文件\n    filter: new RegExp(`\\\\.(` + externalTypes.join('|') + `)(\\\\?.*)?$`),\n  },\n  async ({ path: id, importer, kind }) => {\n    // importer {string} 要打包的导入模块路径\n    // kind {string} 导入规则 | 'entry-point'| 'import-statement'| 'require-call'| 'dynamic-import'| 'require-resolve'| 'import-rule'| 'url-token'\n    const resolved = await resolve(id, importer, kind);\n    if (resolved) {\n      // 返回标记特殊处理，并返回引入文件的路径\n      return {\n        path: resolved,\n        external: true,\n      };\n    }\n  },\n);\n```\n\n处理 js 类型的文件:\n\n以下代码就是 Vite 最刺激的地方，我应该会新建一篇章节来解释这块代码。\n\n```typescript\n// /optimizer/esbuildDepPlugin.ts\n\n// 这个onResolve为处理js类型的文件\n\nbuild.onResolve(\n  { filter: /^[\\w@][^:]/ },\n  async ({ path: id, importer, kind, resolveDir }) => {\n    /**\n      id:  vue\n      importer:\n      kind:  entry-point\n\n      id:  @vue/runtime-dom\n      importer:  /Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\n      kind:  import-statement\n\n      参数如上，vite把预打包的模块分为 入口模块和依赖模块，\n      像axios vue之类的 我们在项目中import的模块，\n      runtime-dom 这种模块则是在package-lock.json, 是项目中入口模块的依赖模块，\n      然后经过以下代码来区分并处理。\n    */\n    const isEntry = !importer;\n    // ensure esbuild uses our resolved entries\n    let entry;\n    // if this is an entry, return entry namespace resolve result\n    // 如果他是入口，就返回名为dep的命名空间来做接下来操作\n    if ((entry = resolveEntry(id, isEntry, resolveDir))) return entry;\n\n    // check if this is aliased to an entry - also return entry namespace\n    const aliased = await _resolve(id, undefined, true);\n    if (aliased && (entry = resolveEntry(aliased, isEntry, resolveDir))) {\n      return entry;\n    }\n\n    // use vite's own resolver\n    // ok这里开始处理依赖模块的流程，这边resolve\n    const resolved = await resolve(id, importer, kind);\n    if (resolved) {\n      // vite自定义的id const browserExternalId = '__vite-browser-external'\n      // 返回命名空间和id，因为浏览器兼容问题，无法处理的忽略模块\n      if (resolved.startsWith(browserExternalId)) {\n        //返回给browser-external命名空间处理并返回id\n        return {\n          path: id,\n          namespace: 'browser-external',\n        };\n      }\n      // 是否是非js或者外部文件，和上一个onResolve一样返回处理\n      if (isExternalUrl(resolved)) {\n        return {\n          path: resolved,\n          external: true,\n        };\n      }\n      return {\n        path: path.resolve(resolved),\n      };\n    }\n  },\n);\n```\n\n#### (5) Vite 的`onLoad`\n\n`dep`命名空间处理,下面代码有点复杂，简单说下逻辑。\n\n第一步，获取每个入口模块的引入路径，例如`axios`的`entryFile`为`/.../my-vue-app/node_modules/axios/index.js`,\n\n转换成路径`relativePath`并添加前缀`node_modules/axios/index.js`。\n\n第二步，根据`exportsData`（之前 parse 后返回出的引入和导出的数据）来判断`commonjs、default、export from`类型，\n\n最后转换成`contents` => `export default require(\"./node_modules/axios/index.js\")`。\n\n第三步，根据入口模块的路径获取后缀`ext`。\n\n最后返回对象。\n\n```typescript\n/**\n * loader {string} 告诉esbuild要解析成js/css/....\n * resolveDir {string} 模块导入路径\n * contents: {string} 加载内容\n */\nreturn {\n  loader: ext as Loader,\n  contents,\n  resolveDir: root,\n};\n```\n\n```typescript\n// 获取项目的路径\nconst root = path.resolve(config.root);\nbuild.onLoad({ filter: /.*/, namespace: 'dep' }, ({ path: id }) => {\n  // 入口文件 vue => /.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js\n  const entryFile = qualified[id];\n  // 获取原始路径\n  let relativePath = normalizePath(path.relative(root, entryFile));\n  // 这边来处理 .abc.js => ./abc.js\n  if (!relativePath.startsWith('.')) {\n    relativePath = `./${relativePath}`;\n  }\n\n  let contents = '';\n  const data = exportsData[id];\n  const [imports, exports] = data;\n  // 下面都是处理不同模块的流程\n  if (!imports.length && !exports.length) {\n    // cjs\n    // export default require(\"./node_modules/axios/index.js\");\n    contents += `export default require(\"${relativePath}\");`;\n  } else {\n    if (exports.includes('default')) {\n      // default\n      // import d from \"./node_modules/element-plus/lib/index.esm.js\";export default d;\n      contents += `import d from \"${relativePath}\";export default d;`;\n    }\n    if (data.hasReExports || exports.length > 1 || exports[0] !== 'default') {\n      // hasReExports\n      // export * from \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\"\n      contents += `\\nexport * from \"${relativePath}\"`;\n    }\n  }\n  // 获取入口文件的后缀\n  let ext = path.extname(entryFile).slice(1);\n  if (ext === 'mjs') ext = 'js';\n  /**\n   * loader {string} 告诉esbuild要解析成js/css/....\n   * resolveDir {string} 模块导入路径\n   * contents: {string} 加载内容\n   *\n   * 以下是一个处理vue runtime-dom的例子\n   * {\n   *  ext: 'js',\n   *  contents: \"export * from \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\",\n   *  resolveDir: '..../node_modules/vue/dist'\n   * }\n   */\n  return {\n    loader: ext as Loader,\n    contents,\n    resolveDir: root,\n  };\n});\n```\n\n### 总结\n\n1. 上一章节[预构建对象和前期准备](/docs/rebuild/optimizer)中获取`deps`对象后，调用`esbuild`的打包功能。\n\n2. 传入`Vite`自定义的插件中，以文件类型分类。\n\n3. \b 告诉 esbuild 分为入口模块和依赖模块并处理，最终打包文件写入至`/node_modules/.vite`文件夹中。\n\n### 最后\n\nVite 项目(Vue)中的`axios`编译走向如下：\n\n#### 1. Vue 项目组件中引入`axios`\n\n![pre-build](/images/build/1.png)\n\n#### 2. .vite 文件中的`axios.js`文件，已经编译成上一节中`contents`的路径了。\n\n![pre-build](/images/build/3.png)\n\n### 最后的最后\n\n所有依赖模块构建完毕后写入`/node_modules/.vite`文件中，如若依赖项新增或改变，则会重写构建`.vite`。每次启动项目时，如果有预构建文件，可以直接启动，不需要每次重写打包依赖项。\n\n`ECMA Script Modules(esm)`, 虽然 2021 年了，很多前端都已经在用最新的技术和代码来做项目，但是还有很多很多很多非常好用的模块都是好几年前创建的，那些模块导出机制五花八门，由`Vite`统一转换成 esm 的方式，只提供源码，让浏览器接管了打包这一服务。当页面需要某个模块时，Vite 只要转换并返回 esm 方式的源码就行了。\n","slug":"vite-3","published":1,"updated":"2021-07-14T03:57:17.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2yn00500052z6baf7lhhfi","content":"<h1 id=\"Vite-依赖解析和预构建-源码分析-3-构建和插件\"><a href=\"#Vite-依赖解析和预构建-源码分析-3-构建和插件\" class=\"headerlink\" title=\"Vite 依赖解析和预构建 源码分析 - (3)构建和插件\"></a>Vite 依赖解析和预构建 源码分析 - (3)构建和插件</h1><h3 id=\"构建-build\"><a href=\"#构建-build\" class=\"headerlink\" title=\"构建(build)\"></a>构建(build)</h3><p>需要注意的几个参数：</p>\n<ol>\n<li><p><code>format</code>设为<code>esm</code>，是 Vite 的目的之一，将所有的代码视为原生 ES 模块。</p>\n<blockquote>\n<p>CommonJS 和 UMD 兼容性: 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。</p>\n</blockquote>\n</li>\n<li><p><code>splitting</code>设为<code>true</code>，仅适用于 esm 输出下，拆分多个文件引入的模块至单独文件，浏览页面 a 时，加载了 axios，再进入页面 b 时，直接调用已经加载后的 axios，省去了再次请求 axios 的操作。</p>\n<blockquote>\n<p>Code shared between multiple entry points is split off into a separate shared file that both entry points import. That way if the user first browses to one page and then to another page, they don’t have to download all of the JavaScript for the second page from scratch if the shared part has already been downloaded and cached by their browser.</p>\n</blockquote>\n<blockquote>\n<p>Code referenced through an asynchronous import() expression will be split off into a separate file and only loaded when that expression is evaluated. This allows you to improve the initial download time of your app by only downloading the code you need at startup, and then lazily downloading additional code if needed later.</p>\n</blockquote>\n</li>\n<li><p><code>plugins</code>含有 Vite 插件<code>esbuildDepPlugin</code>: 下面会详细解释此插件。</p>\n</li>\n<li><p><code>treeShaking</code>设为<code>ignore-annotations</code>, 文档中提到的忽略无用的代码，以便减轻模块的体积。</p>\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/index.ts</span><br><br><span class=\"hljs-comment\">// 最核心的地方，使用esBuild打包了</span><br><span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> build(&#123;<br>  <span class=\"hljs-attr\">entryPoints</span>: <span class=\"hljs-built_in\">Object</span>.keys(flatIdDeps),<br>  <span class=\"hljs-attr\">bundle</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//任何导入的依赖一起打包</span><br>  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">&#x27;esm&#x27;</span>, <span class=\"hljs-comment\">// 符合vite 转换成esm</span><br>  <span class=\"hljs-attr\">external</span>: config.optimizeDeps?.exclude, <span class=\"hljs-comment\">//不需要处理的模块</span><br>  <span class=\"hljs-attr\">logLevel</span>: <span class=\"hljs-string\">&#x27;error&#x27;</span>, <span class=\"hljs-comment\">//日志级别，只显示错误</span><br>  <span class=\"hljs-comment\">//拆分代码，简单来说就是拆分入口内的共享import文件，在访问a页面时加载了axios，</span><br>  <span class=\"hljs-comment\">//进入了b页面直接使用a页面加载的axios省去了再次请求的过程。</span><br>  <span class=\"hljs-attr\">splitting</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">sourcemap</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//这个不用多说哈</span><br>  <span class=\"hljs-attr\">outdir</span>: cacheDir, <span class=\"hljs-comment\">//vite自定义的默认缓存文件夹， node_modules/.vite</span><br>  <span class=\"hljs-comment\">//修剪树枝？ 默认删除无用的代码，ignore-annotations的话指忽略那些删掉会损坏包的无用代码</span><br>  <span class=\"hljs-attr\">treeShaking</span>: <span class=\"hljs-string\">&#x27;ignore-annotations&#x27;</span>,<br>  <span class=\"hljs-attr\">metafile</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 生成meta json</span><br>  define, <span class=\"hljs-comment\">// 替换标识符</span><br>  <span class=\"hljs-attr\">plugins</span>: [...plugins, esbuildDepPlugin(flatIdDeps, flatIdToExports, config)],<br>  ...esbuildOptions,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"esbuild-插件\"><a href=\"#esbuild-插件\" class=\"headerlink\" title=\"esbuild 插件\"></a>esbuild 插件</h3><p>了解 esbuild 的插件的可以直接跳过这节，此节简单解释了下插件的结构:</p>\n<p>(1) esbuild plugin 是一个包含<code>name</code>和<code>setup</code>的对象结构。 <code>name</code>为插件名,<code>setup</code>是一个接收<code>build</code>的函数。</p>\n<p>(2) 主要的逻辑在<code>setup</code>函数中，分别为<code>build.onResolve</code>和 <code>build.onLoad</code>。</p>\n<p><code>build.onResolve</code>: 此函数拦截相应的导入路径，修改路径并标记特定的命名空间。</p>\n<p><code>build.onLoad</code>: 此函数接收并筛选所有标记命名空间为<code>env-ns</code>的传入项,告诉 esbuild 该如何处理。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> envPlugin = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;env&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">build</span>)</span> &#123;<br>    <span class=\"hljs-comment\">// 第一个参数为拦截规则。如下示例，用正则拦截了名为`env`的路径。</span><br>    <span class=\"hljs-comment\">// 第二个参数为函数，返回对象中包含路径（这里可以对路径修改并返回）和标记`env-ns`命名空间。</span><br>    build.onResolve(&#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/^env$/</span> &#125;, <span class=\"hljs-function\">(<span class=\"hljs-params\">args</span>) =&gt;</span> (&#123;<br>      <span class=\"hljs-attr\">path</span>: args.path,<br>      <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;env-ns&#x27;</span>,<br>    &#125;));<br><br>    <span class=\"hljs-comment\">// 第一个参数为接收命名空间为env-ns的路径并通过filter筛选。</span><br>    <span class=\"hljs-comment\">// 第二个参数为函数，告诉esbuild在env-ns命名空间中要返回json格式的环境变量。</span><br>    build.onLoad(&#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/.*/</span>, <span class=\"hljs-keyword\">namespace</span>: &#x27;env-ns&#x27; &#125;, () =&gt; (&#123;<br>      <span class=\"hljs-attr\">contents</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(process.env),<br>      <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;json&#x27;</span>,<br>    &#125;));<br>  &#125;,<br>&#125;;<br><br><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;esbuild&#x27;</span>)<br>  .build(&#123;<br>    <span class=\"hljs-attr\">entryPoints</span>: [<span class=\"hljs-string\">&#x27;app.js&#x27;</span>],<br>    <span class=\"hljs-attr\">bundle</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">outfile</span>: <span class=\"hljs-string\">&#x27;out.js&#x27;</span>,<br>    <span class=\"hljs-attr\">plugins</span>: [envPlugin],<br>  &#125;)<br>  .catch(<span class=\"hljs-function\">() =&gt;</span> process.exit(<span class=\"hljs-number\">1</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"esbuildDepPlugin\"><a href=\"#esbuildDepPlugin\" class=\"headerlink\" title=\"esbuildDepPlugin\"></a>esbuildDepPlugin</h3><p>首先需要看下 Vite 插件的一些用到的函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">esbuildDepPlugin</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  qualified: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  exportsData: Record&lt;<span class=\"hljs-built_in\">string</span>, ExportsData&gt;,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  config: ResolvedConfig,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>): <span class=\"hljs-title\">Plugin</span></span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-创建了两个解析器，分别对应-esm-和-commonjs。\"><a href=\"#1-创建了两个解析器，分别对应-esm-和-commonjs。\" class=\"headerlink\" title=\"(1) 创建了两个解析器，分别对应 esm 和 commonjs。\"></a>(1) 创建了两个解析器，分别对应 <code>esm</code> 和 <code>commonjs</code>。</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-comment\">// default resolver which prefers ESM</span><br><span class=\"hljs-keyword\">const</span> _resolve = config.createResolver(&#123; <span class=\"hljs-attr\">asSrc</span>: <span class=\"hljs-literal\">false</span> &#125;);<br><br><span class=\"hljs-comment\">// cjs resolver that prefers Node</span><br><span class=\"hljs-keyword\">const</span> _resolveRequire = config.createResolver(&#123;<br>  <span class=\"hljs-attr\">asSrc</span>: <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-attr\">isRequire</span>: <span class=\"hljs-literal\">true</span>,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建-resolve-函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\"><a href=\"#2-创建-resolve-函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\" class=\"headerlink\" title=\"(2) 创建 resolve 函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\"></a>(2) 创建 <code>resolve</code> 函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-keyword\">const</span> resolve = (<br>  id: <span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">importer</span>: <span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">kind</span>: ImportKind,<br>  resolveDir?: <span class=\"hljs-built_in\">string</span>,<br>): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>&gt; =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> _importer;<br>  <span class=\"hljs-comment\">// explicit resolveDir - this is passed only during yarn pnp resolve for</span><br>  <span class=\"hljs-comment\">// entries</span><br>  <span class=\"hljs-comment\">// 传如果传入文件夹，那就获取绝对路径的文件夹路径</span><br>  <span class=\"hljs-keyword\">if</span> (resolveDir) &#123;<br>    _importer = normalizePath(path.join(resolveDir, <span class=\"hljs-string\">&#x27;*&#x27;</span>));<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// map importer ids to file paths for correct resolution</span><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * mporter是否在外部传入的flatIdDeps中，</span><br><span class=\"hljs-comment\">     * &#123;</span><br><span class=\"hljs-comment\">     *  vue: &#x27;/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&#x27;,</span><br><span class=\"hljs-comment\">     *  axios: &#x27;/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/axios/index.js&#x27;</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     * 如果在获取value的路径</span><br><span class=\"hljs-comment\">     */</span><br>    _importer = importer <span class=\"hljs-keyword\">in</span> qualified ? qualified[importer] : importer;<br>  &#125;<br>  <span class=\"hljs-comment\">//判断是否时以require开头，为了筛选出 kind为require-resolve, require-call的模块，调用resolveRequire</span><br>  <span class=\"hljs-keyword\">const</span> resolver = kind.startsWith(<span class=\"hljs-string\">&#x27;require&#x27;</span>) ? _resolveRequire : _resolve;<br>  <span class=\"hljs-comment\">// 返回解决完的路径,这个函数的代码后续会有章节详细讲</span><br>  <span class=\"hljs-keyword\">return</span> resolver(id, _importer);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-创建resolveEntry函数，根据传入类型返回命名空间。\"><a href=\"#3-创建resolveEntry函数，根据传入类型返回命名空间。\" class=\"headerlink\" title=\"(3) 创建resolveEntry函数，根据传入类型返回命名空间。\"></a>(3) 创建<code>resolveEntry</code>函数，根据传入类型返回命名空间。</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolveEntry</span>(<span class=\"hljs-params\">id: <span class=\"hljs-built_in\">string</span>, isEntry: <span class=\"hljs-built_in\">boolean</span>, resolveDir: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> flatId = flattenId(id);<br>  <span class=\"hljs-keyword\">if</span> (flatId <span class=\"hljs-keyword\">in</span> qualified) &#123;<br>    <span class=\"hljs-keyword\">return</span> isEntry<br>      ? &#123;<br>          <span class=\"hljs-attr\">path</span>: flatId,<br>          <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;dep&#x27;</span>,<br>        &#125;<br>      : &#123;<br>          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">require</span>.resolve(qualified[flatId], &#123;<br>            <span class=\"hljs-attr\">paths</span>: [resolveDir],<br>          &#125;),<br>        &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-Vite-的onResolve\"><a href=\"#4-Vite-的onResolve\" class=\"headerlink\" title=\"(4) Vite 的onResolve\"></a>(4) Vite 的<code>onResolve</code></h4><p>Vite 创建了两个<code>onResolve</code>， 一个处理 js 文件，一个处理非 js 类型的文件。</p>\n<p>处理非 js：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-comment\">// 这个onResolve为处理非js类型的文件</span><br><br><span class=\"hljs-comment\">// 非js类型的文件数组</span><br><span class=\"hljs-keyword\">const</span> externalTypes = [<br>  <span class=\"hljs-string\">&#x27;css&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;less&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;sass&#x27;</span>,<br>  ...<br>];<br>build.onResolve(<br>  &#123;<br>    <span class=\"hljs-comment\">// 这边通过正则匹配出在externalTypes数组内\b格式的文件</span><br>    <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">`\\\\.(`</span> + externalTypes.join(<span class=\"hljs-string\">&#x27;|&#x27;</span>) + <span class=\"hljs-string\">`)(\\\\?.*)?$`</span>),<br>  &#125;,<br>  <span class=\"hljs-keyword\">async</span> (&#123; <span class=\"hljs-attr\">path</span>: id, importer, kind &#125;) =&gt; &#123;<br>    <span class=\"hljs-comment\">// importer &#123;string&#125; 要打包的导入模块路径</span><br>    <span class=\"hljs-comment\">// kind &#123;string&#125; 导入规则 | &#x27;entry-point&#x27;| &#x27;import-statement&#x27;| &#x27;require-call&#x27;| &#x27;dynamic-import&#x27;| &#x27;require-resolve&#x27;| &#x27;import-rule&#x27;| &#x27;url-token&#x27;</span><br>    <span class=\"hljs-keyword\">const</span> resolved = <span class=\"hljs-keyword\">await</span> resolve(id, importer, kind);<br>    <span class=\"hljs-keyword\">if</span> (resolved) &#123;<br>      <span class=\"hljs-comment\">// 返回标记特殊处理，并返回引入文件的路径</span><br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">path</span>: resolved,<br>        <span class=\"hljs-attr\">external</span>: <span class=\"hljs-literal\">true</span>,<br>      &#125;;<br>    &#125;<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure>\n\n<p>处理 js 类型的文件:</p>\n<p>以下代码就是 Vite 最刺激的地方，我应该会新建一篇章节来解释这块代码。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-comment\">// 这个onResolve为处理js类型的文件</span><br><br>build.onResolve(<br>  &#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/^[\\w@][^:]/</span> &#125;,<br>  <span class=\"hljs-keyword\">async</span> (&#123; <span class=\"hljs-attr\">path</span>: id, importer, kind, resolveDir &#125;) =&gt; &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      id:  vue</span><br><span class=\"hljs-comment\">      importer:</span><br><span class=\"hljs-comment\">      kind:  entry-point</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">      id:  <span class=\"hljs-doctag\">@vue</span>/runtime-dom</span><br><span class=\"hljs-comment\">      importer:  /Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js</span><br><span class=\"hljs-comment\">      kind:  import-statement</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">      参数如上，vite把预打包的模块分为 入口模块和依赖模块，</span><br><span class=\"hljs-comment\">      像axios vue之类的 我们在项目中import的模块，</span><br><span class=\"hljs-comment\">      runtime-dom 这种模块则是在package-lock.json, 是项目中入口模块的依赖模块，</span><br><span class=\"hljs-comment\">      然后经过以下代码来区分并处理。</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">const</span> isEntry = !importer;<br>    <span class=\"hljs-comment\">// ensure esbuild uses our resolved entries</span><br>    <span class=\"hljs-keyword\">let</span> entry;<br>    <span class=\"hljs-comment\">// if this is an entry, return entry namespace resolve result</span><br>    <span class=\"hljs-comment\">// 如果他是入口，就返回名为dep的命名空间来做接下来操作</span><br>    <span class=\"hljs-keyword\">if</span> ((entry = resolveEntry(id, isEntry, resolveDir))) <span class=\"hljs-keyword\">return</span> entry;<br><br>    <span class=\"hljs-comment\">// check if this is aliased to an entry - also return entry namespace</span><br>    <span class=\"hljs-keyword\">const</span> aliased = <span class=\"hljs-keyword\">await</span> _resolve(id, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-keyword\">if</span> (aliased &amp;&amp; (entry = resolveEntry(aliased, isEntry, resolveDir))) &#123;<br>      <span class=\"hljs-keyword\">return</span> entry;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// use vite&#x27;s own resolver</span><br>    <span class=\"hljs-comment\">// ok这里开始处理依赖模块的流程，这边resolve</span><br>    <span class=\"hljs-keyword\">const</span> resolved = <span class=\"hljs-keyword\">await</span> resolve(id, importer, kind);<br>    <span class=\"hljs-keyword\">if</span> (resolved) &#123;<br>      <span class=\"hljs-comment\">// vite自定义的id const browserExternalId = &#x27;__vite-browser-external&#x27;</span><br>      <span class=\"hljs-comment\">// 返回命名空间和id，因为浏览器兼容问题，无法处理的忽略模块</span><br>      <span class=\"hljs-keyword\">if</span> (resolved.startsWith(browserExternalId)) &#123;<br>        <span class=\"hljs-comment\">//返回给browser-external命名空间处理并返回id</span><br>        <span class=\"hljs-keyword\">return</span> &#123;<br>          <span class=\"hljs-attr\">path</span>: id,<br>          <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;browser-external&#x27;</span>,<br>        &#125;;<br>      &#125;<br>      <span class=\"hljs-comment\">// 是否是非js或者外部文件，和上一个onResolve一样返回处理</span><br>      <span class=\"hljs-keyword\">if</span> (isExternalUrl(resolved)) &#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>          <span class=\"hljs-attr\">path</span>: resolved,<br>          <span class=\"hljs-attr\">external</span>: <span class=\"hljs-literal\">true</span>,<br>        &#125;;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">path</span>: path.resolve(resolved),<br>      &#125;;<br>    &#125;<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-Vite-的onLoad\"><a href=\"#5-Vite-的onLoad\" class=\"headerlink\" title=\"(5) Vite 的onLoad\"></a>(5) Vite 的<code>onLoad</code></h4><p><code>dep</code>命名空间处理,下面代码有点复杂，简单说下逻辑。</p>\n<p>第一步，获取每个入口模块的引入路径，例如<code>axios</code>的<code>entryFile</code>为<code>/.../my-vue-app/node_modules/axios/index.js</code>,</p>\n<p>转换成路径<code>relativePath</code>并添加前缀<code>node_modules/axios/index.js</code>。</p>\n<p>第二步，根据<code>exportsData</code>（之前 parse 后返回出的引入和导出的数据）来判断<code>commonjs、default、export from</code>类型，</p>\n<p>最后转换成<code>contents</code> =&gt; <code>export default require(&quot;./node_modules/axios/index.js&quot;)</code>。</p>\n<p>第三步，根据入口模块的路径获取后缀<code>ext</code>。</p>\n<p>最后返回对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * loader &#123;string&#125; 告诉esbuild要解析成js/css/....</span><br><span class=\"hljs-comment\"> * resolveDir &#123;string&#125; 模块导入路径</span><br><span class=\"hljs-comment\"> * contents: &#123;string&#125; 加载内容</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">return</span> &#123;<br>  <span class=\"hljs-attr\">loader</span>: ext <span class=\"hljs-keyword\">as</span> Loader,<br>  contents,<br>  <span class=\"hljs-attr\">resolveDir</span>: root,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 获取项目的路径</span><br><span class=\"hljs-keyword\">const</span> root = path.resolve(config.root);<br>build.onLoad(&#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/.*/</span>, <span class=\"hljs-keyword\">namespace</span>: &#x27;dep&#x27; &#125;, (&#123; path: id &#125;) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 入口文件 vue =&gt; /.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js</span><br>  <span class=\"hljs-keyword\">const</span> entryFile = qualified[id];<br>  <span class=\"hljs-comment\">// 获取原始路径</span><br>  <span class=\"hljs-keyword\">let</span> relativePath = normalizePath(path.relative(root, entryFile));<br>  <span class=\"hljs-comment\">// 这边来处理 .abc.js =&gt; ./abc.js</span><br>  <span class=\"hljs-keyword\">if</span> (!relativePath.startsWith(<span class=\"hljs-string\">&#x27;.&#x27;</span>)) &#123;<br>    relativePath = <span class=\"hljs-string\">`./<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>`</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-keyword\">const</span> data = exportsData[id];<br>  <span class=\"hljs-keyword\">const</span> [imports, <span class=\"hljs-built_in\">exports</span>] = data;<br>  <span class=\"hljs-comment\">// 下面都是处理不同模块的流程</span><br>  <span class=\"hljs-keyword\">if</span> (!imports.length &amp;&amp; !<span class=\"hljs-built_in\">exports</span>.length) &#123;<br>    <span class=\"hljs-comment\">// cjs</span><br>    <span class=\"hljs-comment\">// export default require(&quot;./node_modules/axios/index.js&quot;);</span><br>    contents += <span class=\"hljs-string\">`export default require(&quot;<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>&quot;);`</span>;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">exports</span>.includes(<span class=\"hljs-string\">&#x27;default&#x27;</span>)) &#123;<br>      <span class=\"hljs-comment\">// default</span><br>      <span class=\"hljs-comment\">// import d from &quot;./node_modules/element-plus/lib/index.esm.js&quot;;export default d;</span><br>      contents += <span class=\"hljs-string\">`import d from &quot;<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>&quot;;export default d;`</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (data.hasReExports || <span class=\"hljs-built_in\">exports</span>.length &gt; <span class=\"hljs-number\">1</span> || <span class=\"hljs-built_in\">exports</span>[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-string\">&#x27;default&#x27;</span>) &#123;<br>      <span class=\"hljs-comment\">// hasReExports</span><br>      <span class=\"hljs-comment\">// export * from &quot;./node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span><br>      contents += <span class=\"hljs-string\">`\\nexport * from &quot;<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>&quot;`</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 获取入口文件的后缀</span><br>  <span class=\"hljs-keyword\">let</span> ext = path.extname(entryFile).slice(<span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-keyword\">if</span> (ext === <span class=\"hljs-string\">&#x27;mjs&#x27;</span>) ext = <span class=\"hljs-string\">&#x27;js&#x27;</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * loader &#123;string&#125; 告诉esbuild要解析成js/css/....</span><br><span class=\"hljs-comment\">   * resolveDir &#123;string&#125; 模块导入路径</span><br><span class=\"hljs-comment\">   * contents: &#123;string&#125; 加载内容</span><br><span class=\"hljs-comment\">   *</span><br><span class=\"hljs-comment\">   * 以下是一个处理vue runtime-dom的例子</span><br><span class=\"hljs-comment\">   * &#123;</span><br><span class=\"hljs-comment\">   *  ext: &#x27;js&#x27;,</span><br><span class=\"hljs-comment\">   *  contents: &quot;export * from &quot;./node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;,</span><br><span class=\"hljs-comment\">   *  resolveDir: &#x27;..../node_modules/vue/dist&#x27;</span><br><span class=\"hljs-comment\">   * &#125;</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    <span class=\"hljs-attr\">loader</span>: ext <span class=\"hljs-keyword\">as</span> Loader,<br>    contents,<br>    <span class=\"hljs-attr\">resolveDir</span>: root,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><p>上一章节<a href=\"/docs/rebuild/optimizer\">预构建对象和前期准备</a>中获取<code>deps</code>对象后，调用<code>esbuild</code>的打包功能。</p>\n</li>\n<li><p>传入<code>Vite</code>自定义的插件中，以文件类型分类。</p>\n</li>\n<li><p>\b 告诉 esbuild 分为入口模块和依赖模块并处理，最终打包文件写入至<code>/node_modules/.vite</code>文件夹中。</p>\n</li>\n</ol>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>Vite 项目(Vue)中的<code>axios</code>编译走向如下：</p>\n<h4 id=\"1-Vue-项目组件中引入axios\"><a href=\"#1-Vue-项目组件中引入axios\" class=\"headerlink\" title=\"1. Vue 项目组件中引入axios\"></a>1. Vue 项目组件中引入<code>axios</code></h4><p><img src=\"/images/build/1.png\" alt=\"pre-build\"></p>\n<h4 id=\"2-vite-文件中的axios-js文件，已经编译成上一节中contents的路径了。\"><a href=\"#2-vite-文件中的axios-js文件，已经编译成上一节中contents的路径了。\" class=\"headerlink\" title=\"2. .vite 文件中的axios.js文件，已经编译成上一节中contents的路径了。\"></a>2. .vite 文件中的<code>axios.js</code>文件，已经编译成上一节中<code>contents</code>的路径了。</h4><p><img src=\"/images/build/3.png\" alt=\"pre-build\"></p>\n<h3 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h3><p>所有依赖模块构建完毕后写入<code>/node_modules/.vite</code>文件中，如若依赖项新增或改变，则会重写构建<code>.vite</code>。每次启动项目时，如果有预构建文件，可以直接启动，不需要每次重写打包依赖项。</p>\n<p><code>ECMA Script Modules(esm)</code>, 虽然 2021 年了，很多前端都已经在用最新的技术和代码来做项目，但是还有很多很多很多非常好用的模块都是好几年前创建的，那些模块导出机制五花八门，由<code>Vite</code>统一转换成 esm 的方式，只提供源码，让浏览器接管了打包这一服务。当页面需要某个模块时，Vite 只要转换并返回 esm 方式的源码就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vite-依赖解析和预构建-源码分析-3-构建和插件\"><a href=\"#Vite-依赖解析和预构建-源码分析-3-构建和插件\" class=\"headerlink\" title=\"Vite 依赖解析和预构建 源码分析 - (3)构建和插件\"></a>Vite 依赖解析和预构建 源码分析 - (3)构建和插件</h1><h3 id=\"构建-build\"><a href=\"#构建-build\" class=\"headerlink\" title=\"构建(build)\"></a>构建(build)</h3><p>需要注意的几个参数：</p>\n<ol>\n<li><p><code>format</code>设为<code>esm</code>，是 Vite 的目的之一，将所有的代码视为原生 ES 模块。</p>\n<blockquote>\n<p>CommonJS 和 UMD 兼容性: 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。</p>\n</blockquote>\n</li>\n<li><p><code>splitting</code>设为<code>true</code>，仅适用于 esm 输出下，拆分多个文件引入的模块至单独文件，浏览页面 a 时，加载了 axios，再进入页面 b 时，直接调用已经加载后的 axios，省去了再次请求 axios 的操作。</p>\n<blockquote>\n<p>Code shared between multiple entry points is split off into a separate shared file that both entry points import. That way if the user first browses to one page and then to another page, they don’t have to download all of the JavaScript for the second page from scratch if the shared part has already been downloaded and cached by their browser.</p>\n</blockquote>\n<blockquote>\n<p>Code referenced through an asynchronous import() expression will be split off into a separate file and only loaded when that expression is evaluated. This allows you to improve the initial download time of your app by only downloading the code you need at startup, and then lazily downloading additional code if needed later.</p>\n</blockquote>\n</li>\n<li><p><code>plugins</code>含有 Vite 插件<code>esbuildDepPlugin</code>: 下面会详细解释此插件。</p>\n</li>\n<li><p><code>treeShaking</code>设为<code>ignore-annotations</code>, 文档中提到的忽略无用的代码，以便减轻模块的体积。</p>\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/index.ts</span><br><br><span class=\"hljs-comment\">// 最核心的地方，使用esBuild打包了</span><br><span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> build(&#123;<br>  <span class=\"hljs-attr\">entryPoints</span>: <span class=\"hljs-built_in\">Object</span>.keys(flatIdDeps),<br>  <span class=\"hljs-attr\">bundle</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//任何导入的依赖一起打包</span><br>  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">&#x27;esm&#x27;</span>, <span class=\"hljs-comment\">// 符合vite 转换成esm</span><br>  <span class=\"hljs-attr\">external</span>: config.optimizeDeps?.exclude, <span class=\"hljs-comment\">//不需要处理的模块</span><br>  <span class=\"hljs-attr\">logLevel</span>: <span class=\"hljs-string\">&#x27;error&#x27;</span>, <span class=\"hljs-comment\">//日志级别，只显示错误</span><br>  <span class=\"hljs-comment\">//拆分代码，简单来说就是拆分入口内的共享import文件，在访问a页面时加载了axios，</span><br>  <span class=\"hljs-comment\">//进入了b页面直接使用a页面加载的axios省去了再次请求的过程。</span><br>  <span class=\"hljs-attr\">splitting</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">sourcemap</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//这个不用多说哈</span><br>  <span class=\"hljs-attr\">outdir</span>: cacheDir, <span class=\"hljs-comment\">//vite自定义的默认缓存文件夹， node_modules/.vite</span><br>  <span class=\"hljs-comment\">//修剪树枝？ 默认删除无用的代码，ignore-annotations的话指忽略那些删掉会损坏包的无用代码</span><br>  <span class=\"hljs-attr\">treeShaking</span>: <span class=\"hljs-string\">&#x27;ignore-annotations&#x27;</span>,<br>  <span class=\"hljs-attr\">metafile</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 生成meta json</span><br>  define, <span class=\"hljs-comment\">// 替换标识符</span><br>  <span class=\"hljs-attr\">plugins</span>: [...plugins, esbuildDepPlugin(flatIdDeps, flatIdToExports, config)],<br>  ...esbuildOptions,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"esbuild-插件\"><a href=\"#esbuild-插件\" class=\"headerlink\" title=\"esbuild 插件\"></a>esbuild 插件</h3><p>了解 esbuild 的插件的可以直接跳过这节，此节简单解释了下插件的结构:</p>\n<p>(1) esbuild plugin 是一个包含<code>name</code>和<code>setup</code>的对象结构。 <code>name</code>为插件名,<code>setup</code>是一个接收<code>build</code>的函数。</p>\n<p>(2) 主要的逻辑在<code>setup</code>函数中，分别为<code>build.onResolve</code>和 <code>build.onLoad</code>。</p>\n<p><code>build.onResolve</code>: 此函数拦截相应的导入路径，修改路径并标记特定的命名空间。</p>\n<p><code>build.onLoad</code>: 此函数接收并筛选所有标记命名空间为<code>env-ns</code>的传入项,告诉 esbuild 该如何处理。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> envPlugin = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;env&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">build</span>)</span> &#123;<br>    <span class=\"hljs-comment\">// 第一个参数为拦截规则。如下示例，用正则拦截了名为`env`的路径。</span><br>    <span class=\"hljs-comment\">// 第二个参数为函数，返回对象中包含路径（这里可以对路径修改并返回）和标记`env-ns`命名空间。</span><br>    build.onResolve(&#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/^env$/</span> &#125;, <span class=\"hljs-function\">(<span class=\"hljs-params\">args</span>) =&gt;</span> (&#123;<br>      <span class=\"hljs-attr\">path</span>: args.path,<br>      <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;env-ns&#x27;</span>,<br>    &#125;));<br><br>    <span class=\"hljs-comment\">// 第一个参数为接收命名空间为env-ns的路径并通过filter筛选。</span><br>    <span class=\"hljs-comment\">// 第二个参数为函数，告诉esbuild在env-ns命名空间中要返回json格式的环境变量。</span><br>    build.onLoad(&#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/.*/</span>, <span class=\"hljs-keyword\">namespace</span>: &#x27;env-ns&#x27; &#125;, () =&gt; (&#123;<br>      <span class=\"hljs-attr\">contents</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(process.env),<br>      <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;json&#x27;</span>,<br>    &#125;));<br>  &#125;,<br>&#125;;<br><br><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;esbuild&#x27;</span>)<br>  .build(&#123;<br>    <span class=\"hljs-attr\">entryPoints</span>: [<span class=\"hljs-string\">&#x27;app.js&#x27;</span>],<br>    <span class=\"hljs-attr\">bundle</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">outfile</span>: <span class=\"hljs-string\">&#x27;out.js&#x27;</span>,<br>    <span class=\"hljs-attr\">plugins</span>: [envPlugin],<br>  &#125;)<br>  .catch(<span class=\"hljs-function\">() =&gt;</span> process.exit(<span class=\"hljs-number\">1</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"esbuildDepPlugin\"><a href=\"#esbuildDepPlugin\" class=\"headerlink\" title=\"esbuildDepPlugin\"></a>esbuildDepPlugin</h3><p>首先需要看下 Vite 插件的一些用到的函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">esbuildDepPlugin</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  qualified: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  exportsData: Record&lt;<span class=\"hljs-built_in\">string</span>, ExportsData&gt;,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">  config: ResolvedConfig,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>): <span class=\"hljs-title\">Plugin</span></span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-创建了两个解析器，分别对应-esm-和-commonjs。\"><a href=\"#1-创建了两个解析器，分别对应-esm-和-commonjs。\" class=\"headerlink\" title=\"(1) 创建了两个解析器，分别对应 esm 和 commonjs。\"></a>(1) 创建了两个解析器，分别对应 <code>esm</code> 和 <code>commonjs</code>。</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-comment\">// default resolver which prefers ESM</span><br><span class=\"hljs-keyword\">const</span> _resolve = config.createResolver(&#123; <span class=\"hljs-attr\">asSrc</span>: <span class=\"hljs-literal\">false</span> &#125;);<br><br><span class=\"hljs-comment\">// cjs resolver that prefers Node</span><br><span class=\"hljs-keyword\">const</span> _resolveRequire = config.createResolver(&#123;<br>  <span class=\"hljs-attr\">asSrc</span>: <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-attr\">isRequire</span>: <span class=\"hljs-literal\">true</span>,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建-resolve-函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\"><a href=\"#2-创建-resolve-函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\" class=\"headerlink\" title=\"(2) 创建 resolve 函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。\"></a>(2) 创建 <code>resolve</code> 函数，主要用来解决判断是什么类型的模块，并且返回相应的解析器结果。</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-keyword\">const</span> resolve = (<br>  id: <span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">importer</span>: <span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">kind</span>: ImportKind,<br>  resolveDir?: <span class=\"hljs-built_in\">string</span>,<br>): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>&gt; =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> _importer;<br>  <span class=\"hljs-comment\">// explicit resolveDir - this is passed only during yarn pnp resolve for</span><br>  <span class=\"hljs-comment\">// entries</span><br>  <span class=\"hljs-comment\">// 传如果传入文件夹，那就获取绝对路径的文件夹路径</span><br>  <span class=\"hljs-keyword\">if</span> (resolveDir) &#123;<br>    _importer = normalizePath(path.join(resolveDir, <span class=\"hljs-string\">&#x27;*&#x27;</span>));<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// map importer ids to file paths for correct resolution</span><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * mporter是否在外部传入的flatIdDeps中，</span><br><span class=\"hljs-comment\">     * &#123;</span><br><span class=\"hljs-comment\">     *  vue: &#x27;/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js&#x27;,</span><br><span class=\"hljs-comment\">     *  axios: &#x27;/Users/kev1nzh/Desktop/new/my-vue-app/node_modules/axios/index.js&#x27;</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     * 如果在获取value的路径</span><br><span class=\"hljs-comment\">     */</span><br>    _importer = importer <span class=\"hljs-keyword\">in</span> qualified ? qualified[importer] : importer;<br>  &#125;<br>  <span class=\"hljs-comment\">//判断是否时以require开头，为了筛选出 kind为require-resolve, require-call的模块，调用resolveRequire</span><br>  <span class=\"hljs-keyword\">const</span> resolver = kind.startsWith(<span class=\"hljs-string\">&#x27;require&#x27;</span>) ? _resolveRequire : _resolve;<br>  <span class=\"hljs-comment\">// 返回解决完的路径,这个函数的代码后续会有章节详细讲</span><br>  <span class=\"hljs-keyword\">return</span> resolver(id, _importer);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-创建resolveEntry函数，根据传入类型返回命名空间。\"><a href=\"#3-创建resolveEntry函数，根据传入类型返回命名空间。\" class=\"headerlink\" title=\"(3) 创建resolveEntry函数，根据传入类型返回命名空间。\"></a>(3) 创建<code>resolveEntry</code>函数，根据传入类型返回命名空间。</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolveEntry</span>(<span class=\"hljs-params\">id: <span class=\"hljs-built_in\">string</span>, isEntry: <span class=\"hljs-built_in\">boolean</span>, resolveDir: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> flatId = flattenId(id);<br>  <span class=\"hljs-keyword\">if</span> (flatId <span class=\"hljs-keyword\">in</span> qualified) &#123;<br>    <span class=\"hljs-keyword\">return</span> isEntry<br>      ? &#123;<br>          <span class=\"hljs-attr\">path</span>: flatId,<br>          <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;dep&#x27;</span>,<br>        &#125;<br>      : &#123;<br>          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">require</span>.resolve(qualified[flatId], &#123;<br>            <span class=\"hljs-attr\">paths</span>: [resolveDir],<br>          &#125;),<br>        &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-Vite-的onResolve\"><a href=\"#4-Vite-的onResolve\" class=\"headerlink\" title=\"(4) Vite 的onResolve\"></a>(4) Vite 的<code>onResolve</code></h4><p>Vite 创建了两个<code>onResolve</code>， 一个处理 js 文件，一个处理非 js 类型的文件。</p>\n<p>处理非 js：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-comment\">// 这个onResolve为处理非js类型的文件</span><br><br><span class=\"hljs-comment\">// 非js类型的文件数组</span><br><span class=\"hljs-keyword\">const</span> externalTypes = [<br>  <span class=\"hljs-string\">&#x27;css&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;less&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;sass&#x27;</span>,<br>  ...<br>];<br>build.onResolve(<br>  &#123;<br>    <span class=\"hljs-comment\">// 这边通过正则匹配出在externalTypes数组内\b格式的文件</span><br>    <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">`\\\\.(`</span> + externalTypes.join(<span class=\"hljs-string\">&#x27;|&#x27;</span>) + <span class=\"hljs-string\">`)(\\\\?.*)?$`</span>),<br>  &#125;,<br>  <span class=\"hljs-keyword\">async</span> (&#123; <span class=\"hljs-attr\">path</span>: id, importer, kind &#125;) =&gt; &#123;<br>    <span class=\"hljs-comment\">// importer &#123;string&#125; 要打包的导入模块路径</span><br>    <span class=\"hljs-comment\">// kind &#123;string&#125; 导入规则 | &#x27;entry-point&#x27;| &#x27;import-statement&#x27;| &#x27;require-call&#x27;| &#x27;dynamic-import&#x27;| &#x27;require-resolve&#x27;| &#x27;import-rule&#x27;| &#x27;url-token&#x27;</span><br>    <span class=\"hljs-keyword\">const</span> resolved = <span class=\"hljs-keyword\">await</span> resolve(id, importer, kind);<br>    <span class=\"hljs-keyword\">if</span> (resolved) &#123;<br>      <span class=\"hljs-comment\">// 返回标记特殊处理，并返回引入文件的路径</span><br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">path</span>: resolved,<br>        <span class=\"hljs-attr\">external</span>: <span class=\"hljs-literal\">true</span>,<br>      &#125;;<br>    &#125;<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure>\n\n<p>处理 js 类型的文件:</p>\n<p>以下代码就是 Vite 最刺激的地方，我应该会新建一篇章节来解释这块代码。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// /optimizer/esbuildDepPlugin.ts</span><br><br><span class=\"hljs-comment\">// 这个onResolve为处理js类型的文件</span><br><br>build.onResolve(<br>  &#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/^[\\w@][^:]/</span> &#125;,<br>  <span class=\"hljs-keyword\">async</span> (&#123; <span class=\"hljs-attr\">path</span>: id, importer, kind, resolveDir &#125;) =&gt; &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      id:  vue</span><br><span class=\"hljs-comment\">      importer:</span><br><span class=\"hljs-comment\">      kind:  entry-point</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">      id:  <span class=\"hljs-doctag\">@vue</span>/runtime-dom</span><br><span class=\"hljs-comment\">      importer:  /Users/kev1nzh/Desktop/new/my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js</span><br><span class=\"hljs-comment\">      kind:  import-statement</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">      参数如上，vite把预打包的模块分为 入口模块和依赖模块，</span><br><span class=\"hljs-comment\">      像axios vue之类的 我们在项目中import的模块，</span><br><span class=\"hljs-comment\">      runtime-dom 这种模块则是在package-lock.json, 是项目中入口模块的依赖模块，</span><br><span class=\"hljs-comment\">      然后经过以下代码来区分并处理。</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">const</span> isEntry = !importer;<br>    <span class=\"hljs-comment\">// ensure esbuild uses our resolved entries</span><br>    <span class=\"hljs-keyword\">let</span> entry;<br>    <span class=\"hljs-comment\">// if this is an entry, return entry namespace resolve result</span><br>    <span class=\"hljs-comment\">// 如果他是入口，就返回名为dep的命名空间来做接下来操作</span><br>    <span class=\"hljs-keyword\">if</span> ((entry = resolveEntry(id, isEntry, resolveDir))) <span class=\"hljs-keyword\">return</span> entry;<br><br>    <span class=\"hljs-comment\">// check if this is aliased to an entry - also return entry namespace</span><br>    <span class=\"hljs-keyword\">const</span> aliased = <span class=\"hljs-keyword\">await</span> _resolve(id, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-keyword\">if</span> (aliased &amp;&amp; (entry = resolveEntry(aliased, isEntry, resolveDir))) &#123;<br>      <span class=\"hljs-keyword\">return</span> entry;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// use vite&#x27;s own resolver</span><br>    <span class=\"hljs-comment\">// ok这里开始处理依赖模块的流程，这边resolve</span><br>    <span class=\"hljs-keyword\">const</span> resolved = <span class=\"hljs-keyword\">await</span> resolve(id, importer, kind);<br>    <span class=\"hljs-keyword\">if</span> (resolved) &#123;<br>      <span class=\"hljs-comment\">// vite自定义的id const browserExternalId = &#x27;__vite-browser-external&#x27;</span><br>      <span class=\"hljs-comment\">// 返回命名空间和id，因为浏览器兼容问题，无法处理的忽略模块</span><br>      <span class=\"hljs-keyword\">if</span> (resolved.startsWith(browserExternalId)) &#123;<br>        <span class=\"hljs-comment\">//返回给browser-external命名空间处理并返回id</span><br>        <span class=\"hljs-keyword\">return</span> &#123;<br>          <span class=\"hljs-attr\">path</span>: id,<br>          <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;browser-external&#x27;</span>,<br>        &#125;;<br>      &#125;<br>      <span class=\"hljs-comment\">// 是否是非js或者外部文件，和上一个onResolve一样返回处理</span><br>      <span class=\"hljs-keyword\">if</span> (isExternalUrl(resolved)) &#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>          <span class=\"hljs-attr\">path</span>: resolved,<br>          <span class=\"hljs-attr\">external</span>: <span class=\"hljs-literal\">true</span>,<br>        &#125;;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">path</span>: path.resolve(resolved),<br>      &#125;;<br>    &#125;<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-Vite-的onLoad\"><a href=\"#5-Vite-的onLoad\" class=\"headerlink\" title=\"(5) Vite 的onLoad\"></a>(5) Vite 的<code>onLoad</code></h4><p><code>dep</code>命名空间处理,下面代码有点复杂，简单说下逻辑。</p>\n<p>第一步，获取每个入口模块的引入路径，例如<code>axios</code>的<code>entryFile</code>为<code>/.../my-vue-app/node_modules/axios/index.js</code>,</p>\n<p>转换成路径<code>relativePath</code>并添加前缀<code>node_modules/axios/index.js</code>。</p>\n<p>第二步，根据<code>exportsData</code>（之前 parse 后返回出的引入和导出的数据）来判断<code>commonjs、default、export from</code>类型，</p>\n<p>最后转换成<code>contents</code> =&gt; <code>export default require(&quot;./node_modules/axios/index.js&quot;)</code>。</p>\n<p>第三步，根据入口模块的路径获取后缀<code>ext</code>。</p>\n<p>最后返回对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * loader &#123;string&#125; 告诉esbuild要解析成js/css/....</span><br><span class=\"hljs-comment\"> * resolveDir &#123;string&#125; 模块导入路径</span><br><span class=\"hljs-comment\"> * contents: &#123;string&#125; 加载内容</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">return</span> &#123;<br>  <span class=\"hljs-attr\">loader</span>: ext <span class=\"hljs-keyword\">as</span> Loader,<br>  contents,<br>  <span class=\"hljs-attr\">resolveDir</span>: root,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 获取项目的路径</span><br><span class=\"hljs-keyword\">const</span> root = path.resolve(config.root);<br>build.onLoad(&#123; <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-regexp\">/.*/</span>, <span class=\"hljs-keyword\">namespace</span>: &#x27;dep&#x27; &#125;, (&#123; path: id &#125;) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 入口文件 vue =&gt; /.../my-vue-app/node_modules/vue/dist/vue.runtime.esm-bundler.js</span><br>  <span class=\"hljs-keyword\">const</span> entryFile = qualified[id];<br>  <span class=\"hljs-comment\">// 获取原始路径</span><br>  <span class=\"hljs-keyword\">let</span> relativePath = normalizePath(path.relative(root, entryFile));<br>  <span class=\"hljs-comment\">// 这边来处理 .abc.js =&gt; ./abc.js</span><br>  <span class=\"hljs-keyword\">if</span> (!relativePath.startsWith(<span class=\"hljs-string\">&#x27;.&#x27;</span>)) &#123;<br>    relativePath = <span class=\"hljs-string\">`./<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>`</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-keyword\">const</span> data = exportsData[id];<br>  <span class=\"hljs-keyword\">const</span> [imports, <span class=\"hljs-built_in\">exports</span>] = data;<br>  <span class=\"hljs-comment\">// 下面都是处理不同模块的流程</span><br>  <span class=\"hljs-keyword\">if</span> (!imports.length &amp;&amp; !<span class=\"hljs-built_in\">exports</span>.length) &#123;<br>    <span class=\"hljs-comment\">// cjs</span><br>    <span class=\"hljs-comment\">// export default require(&quot;./node_modules/axios/index.js&quot;);</span><br>    contents += <span class=\"hljs-string\">`export default require(&quot;<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>&quot;);`</span>;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">exports</span>.includes(<span class=\"hljs-string\">&#x27;default&#x27;</span>)) &#123;<br>      <span class=\"hljs-comment\">// default</span><br>      <span class=\"hljs-comment\">// import d from &quot;./node_modules/element-plus/lib/index.esm.js&quot;;export default d;</span><br>      contents += <span class=\"hljs-string\">`import d from &quot;<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>&quot;;export default d;`</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (data.hasReExports || <span class=\"hljs-built_in\">exports</span>.length &gt; <span class=\"hljs-number\">1</span> || <span class=\"hljs-built_in\">exports</span>[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-string\">&#x27;default&#x27;</span>) &#123;<br>      <span class=\"hljs-comment\">// hasReExports</span><br>      <span class=\"hljs-comment\">// export * from &quot;./node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span><br>      contents += <span class=\"hljs-string\">`\\nexport * from &quot;<span class=\"hljs-subst\">$&#123;relativePath&#125;</span>&quot;`</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 获取入口文件的后缀</span><br>  <span class=\"hljs-keyword\">let</span> ext = path.extname(entryFile).slice(<span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-keyword\">if</span> (ext === <span class=\"hljs-string\">&#x27;mjs&#x27;</span>) ext = <span class=\"hljs-string\">&#x27;js&#x27;</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * loader &#123;string&#125; 告诉esbuild要解析成js/css/....</span><br><span class=\"hljs-comment\">   * resolveDir &#123;string&#125; 模块导入路径</span><br><span class=\"hljs-comment\">   * contents: &#123;string&#125; 加载内容</span><br><span class=\"hljs-comment\">   *</span><br><span class=\"hljs-comment\">   * 以下是一个处理vue runtime-dom的例子</span><br><span class=\"hljs-comment\">   * &#123;</span><br><span class=\"hljs-comment\">   *  ext: &#x27;js&#x27;,</span><br><span class=\"hljs-comment\">   *  contents: &quot;export * from &quot;./node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;,</span><br><span class=\"hljs-comment\">   *  resolveDir: &#x27;..../node_modules/vue/dist&#x27;</span><br><span class=\"hljs-comment\">   * &#125;</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    <span class=\"hljs-attr\">loader</span>: ext <span class=\"hljs-keyword\">as</span> Loader,<br>    contents,<br>    <span class=\"hljs-attr\">resolveDir</span>: root,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><p>上一章节<a href=\"/docs/rebuild/optimizer\">预构建对象和前期准备</a>中获取<code>deps</code>对象后，调用<code>esbuild</code>的打包功能。</p>\n</li>\n<li><p>传入<code>Vite</code>自定义的插件中，以文件类型分类。</p>\n</li>\n<li><p>\b 告诉 esbuild 分为入口模块和依赖模块并处理，最终打包文件写入至<code>/node_modules/.vite</code>文件夹中。</p>\n</li>\n</ol>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>Vite 项目(Vue)中的<code>axios</code>编译走向如下：</p>\n<h4 id=\"1-Vue-项目组件中引入axios\"><a href=\"#1-Vue-项目组件中引入axios\" class=\"headerlink\" title=\"1. Vue 项目组件中引入axios\"></a>1. Vue 项目组件中引入<code>axios</code></h4><p><img src=\"/images/build/1.png\" alt=\"pre-build\"></p>\n<h4 id=\"2-vite-文件中的axios-js文件，已经编译成上一节中contents的路径了。\"><a href=\"#2-vite-文件中的axios-js文件，已经编译成上一节中contents的路径了。\" class=\"headerlink\" title=\"2. .vite 文件中的axios.js文件，已经编译成上一节中contents的路径了。\"></a>2. .vite 文件中的<code>axios.js</code>文件，已经编译成上一节中<code>contents</code>的路径了。</h4><p><img src=\"/images/build/3.png\" alt=\"pre-build\"></p>\n<h3 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h3><p>所有依赖模块构建完毕后写入<code>/node_modules/.vite</code>文件中，如若依赖项新增或改变，则会重写构建<code>.vite</code>。每次启动项目时，如果有预构建文件，可以直接启动，不需要每次重写打包依赖项。</p>\n<p><code>ECMA Script Modules(esm)</code>, 虽然 2021 年了，很多前端都已经在用最新的技术和代码来做项目，但是还有很多很多很多非常好用的模块都是好几年前创建的，那些模块导出机制五花八门，由<code>Vite</code>统一转换成 esm 的方式，只提供源码，让浏览器接管了打包这一服务。当页面需要某个模块时，Vite 只要转换并返回 esm 方式的源码就行了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckr2ymzzy00012z6b78pk4ebj","tag_id":"ckr2yn00300032z6b0nvv4aox","_id":"ckr2yn00700072z6b53epaice"},{"post_id":"ckr2yn00100022z6b7a4y6qim","tag_id":"ckr2yn00600062z6bgnkyd010","_id":"ckr2yn00a000a2z6bewfl3jat"},{"post_id":"ckr2yn00100022z6b7a4y6qim","tag_id":"ckr2yn00700082z6bfe3b4wzf","_id":"ckr2yn00a000b2z6b31wl2tjf"},{"post_id":"ckr2yn00400042z6b62ilfx0g","tag_id":"ckr2yn00600062z6bgnkyd010","_id":"ckr2yn00c000e2z6bel7471zn"},{"post_id":"ckr2yn00400042z6b62ilfx0g","tag_id":"ckr2yn00700082z6bfe3b4wzf","_id":"ckr2yn00c000f2z6b80nb4jif"},{"post_id":"ckr2yn00500052z6baf7lhhfi","tag_id":"ckr2yn00600062z6bgnkyd010","_id":"ckr2yn00d000h2z6bd3y05hhz"},{"post_id":"ckr2yn00500052z6baf7lhhfi","tag_id":"ckr2yn00700082z6bfe3b4wzf","_id":"ckr2yn00d000i2z6bgf75hidy"}],"Tag":[{"name":"生活","_id":"ckr2yn00300032z6b0nvv4aox"},{"name":"工程化","_id":"ckr2yn00600062z6bgnkyd010"},{"name":"Vite","_id":"ckr2yn00700082z6bfe3b4wzf"}]}}